{"version":3,"sources":["/Users/Raphael/Documents/DEV.nosync/lamap/src/lib/supabase/types.ts"],"sourcesContent":["/**\n * Types générés pour la base de données Supabase LaMap\n *\n * Ces types sont générés automatiquement à partir du schéma de base de données.\n * Ils garantissent la cohérence entre le frontend TypeScript et la base PostgreSQL.\n *\n * Pour régénérer ces types après modification du schéma :\n * npx supabase gen types typescript --project-id YOUR_PROJECT_ID --schema public > src/lib/supabase/types.ts\n */\n\nimport type {\n  Initiative,\n  InitiativeType,\n  OpeningHours,\n} from '@/types/initiative';\n\n// ================================\n// TYPES DE BASE DE DONNÉES\n// ================================\n\n/**\n * Structure principale de la base de données LaMap\n */\nexport interface Database {\n  public: {\n    Tables: {\n      // Table des initiatives ESS\n      initiatives: {\n        Row: DatabaseInitiative;\n        Insert: DatabaseInitiativeInsert;\n        Update: DatabaseInitiativeUpdate;\n      };\n\n      // Tables futures (à ajouter selon les besoins)\n      users_profiles?: {\n        Row: UserProfile;\n        Insert: UserProfileInsert;\n        Update: UserProfileUpdate;\n      };\n\n      comments?: {\n        Row: Comment;\n        Insert: CommentInsert;\n        Update: CommentUpdate;\n      };\n    };\n    Views: {\n      // Vues utiles pour les requêtes\n      initiatives_with_distance?: {\n        Row: InitiativeWithDistance;\n      };\n    };\n    Functions: {\n      // Fonctions PostgreSQL/PostGIS personnalisées\n      get_nearby_initiatives: {\n        Args: {\n          lat: number;\n          lng: number;\n          radius_km?: number;\n        };\n        Returns: InitiativeWithDistance[];\n      };\n\n      get_initiatives_in_bounds: {\n        Args: {\n          min_lat: number;\n          min_lng: number;\n          max_lat: number;\n          max_lng: number;\n        };\n        Returns: DatabaseInitiative[];\n      };\n    };\n    Enums: {\n      initiative_type: InitiativeType;\n    };\n  };\n}\n\n// ================================\n// TYPES POUR LA TABLE INITIATIVES\n// ================================\n\n/**\n * Structure de la table initiatives telle qu'elle existe en base\n */\nexport interface DatabaseInitiative {\n  /** UUID généré automatiquement */\n  id: string;\n\n  /** Nom de l'initiative (NOT NULL) */\n  name: string;\n\n  /** Type d'initiative (enum) */\n  type: InitiativeType;\n\n  /** Description optionnelle */\n  description: string | null;\n\n  /** Adresse textuelle */\n  address: string | null;\n\n  /** Point géographique PostGIS (format WKT: 'POINT(lng lat)') */\n  location: string;\n\n  /** Statut de vérification */\n  verified: boolean;\n\n  /** URL de l'image */\n  image_url: string | null;\n\n  /** Site web */\n  website: string | null;\n\n  /** Téléphone */\n  phone: string | null;\n\n  /** Email */\n  email: string | null;\n\n  /** Horaires (JSONB) */\n  opening_hours: OpeningHours | null;\n\n  /** ID de l'utilisateur créateur */\n  user_id: string | null;\n\n  /** Date de création */\n  created_at: string;\n\n  /** Date de modification */\n  updated_at: string;\n}\n\n/**\n * Type pour l'insertion en base (certains champs sont optionnels)\n */\nexport interface DatabaseInitiativeInsert {\n  id?: string;\n  name: string;\n  type: InitiativeType;\n  description?: string | null;\n  address?: string | null;\n  location: string; // Format PostGIS: 'POINT(longitude latitude)'\n  verified?: boolean;\n  image_url?: string | null;\n  website?: string | null;\n  phone?: string | null;\n  email?: string | null;\n  opening_hours?: OpeningHours | null;\n  user_id?: string | null;\n  created_at?: string;\n  updated_at?: string;\n}\n\n/**\n * Type pour la mise à jour en base (tous les champs optionnels)\n */\nexport interface DatabaseInitiativeUpdate {\n  id?: string;\n  name?: string;\n  type?: InitiativeType;\n  description?: string | null;\n  address?: string | null;\n  location?: string;\n  verified?: boolean;\n  image_url?: string | null;\n  website?: string | null;\n  phone?: string | null;\n  email?: string | null;\n  opening_hours?: OpeningHours | null;\n  user_id?: string | null;\n  updated_at?: string;\n}\n\n// ================================\n// TYPES POUR LES VUES ET FONCTIONS\n// ================================\n\n/**\n * Initiative avec distance calculée (pour les recherches géographiques)\n */\nexport interface InitiativeWithDistance extends DatabaseInitiative {\n  /** Distance en mètres depuis le point de référence */\n  distance_meters: number;\n\n  /** Distance en kilomètres (calculée) */\n  distance_km: number;\n}\n\n// ================================\n// TYPES POUR LES PROFILS UTILISATEUR (FUTUR)\n// ================================\n\n/**\n * Profil utilisateur étendu (table séparée de auth.users)\n */\nexport interface UserProfile {\n  id: string;\n  user_id: string; // Référence vers auth.users\n  display_name: string | null;\n  avatar_url: string | null;\n  bio: string | null;\n  location: string | null;\n  website: string | null;\n  is_moderator: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserProfileInsert {\n  id?: string;\n  user_id: string;\n  display_name?: string | null;\n  avatar_url?: string | null;\n  bio?: string | null;\n  location?: string | null;\n  website?: string | null;\n  is_moderator?: boolean;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface UserProfileUpdate {\n  display_name?: string | null;\n  avatar_url?: string | null;\n  bio?: string | null;\n  location?: string | null;\n  website?: string | null;\n  is_moderator?: boolean;\n  updated_at?: string;\n}\n\n// ================================\n// TYPES POUR LES COMMENTAIRES (FUTUR)\n// ================================\n\n/**\n * Commentaire sur une initiative\n */\nexport interface Comment {\n  id: string;\n  initiative_id: string;\n  user_id: string;\n  content: string;\n  rating: number | null; // Note de 1 à 5\n  is_public: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CommentInsert {\n  id?: string;\n  initiative_id: string;\n  user_id: string;\n  content: string;\n  rating?: number | null;\n  is_public?: boolean;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface CommentUpdate {\n  content?: string;\n  rating?: number | null;\n  is_public?: boolean;\n  updated_at?: string;\n}\n\n// ================================\n// CONVERSION UTILITIES\n// ================================\n\n/**\n * Convert initiative from database format to frontend format\n */\nexport function databaseInitiativeToInitiative(\n  dbInitiative: DatabaseInitiative\n): Initiative {\n  // Parse PostGIS point 'POINT(lng lat)' to GeoJSON\n  const locationMatch = dbInitiative.location.match(/POINT\\(([^)]+)\\)/);\n  if (!locationMatch) {\n    throw new Error(`Invalid location format: ${dbInitiative.location}`);\n  }\n\n  const [lng, lat] = locationMatch[1].split(' ').map(Number);\n\n  return {\n    id: dbInitiative.id,\n    name: dbInitiative.name,\n    type: dbInitiative.type,\n    description: dbInitiative.description || undefined,\n    address: dbInitiative.address || undefined,\n    location: {\n      type: 'Point',\n      coordinates: [lng, lat],\n    },\n    verified: dbInitiative.verified,\n    image_url: dbInitiative.image_url || undefined,\n    website: dbInitiative.website || undefined,\n    phone: dbInitiative.phone || undefined,\n    email: dbInitiative.email || undefined,\n    opening_hours: dbInitiative.opening_hours || undefined,\n    user_id: dbInitiative.user_id || undefined,\n    created_at: dbInitiative.created_at,\n    updated_at: dbInitiative.updated_at,\n  };\n}\n\n/**\n * Convert initiative from frontend format to database format\n */\nexport function initiativeToDatabaseInitiative(\n  initiative: Partial<Initiative>\n): DatabaseInitiativeInsert {\n  const location = initiative.location\n    ? `POINT(${initiative.location.coordinates[0]} ${initiative.location.coordinates[1]})`\n    : undefined;\n\n  return {\n    id: initiative.id,\n    name: initiative.name ?? '',\n    type: initiative.type ?? 'Autre',\n    description: initiative.description || null,\n    address: initiative.address || null,\n    location: location ?? 'POINT(0 0)',\n    verified: initiative.verified ?? false,\n    image_url: initiative.image_url || null,\n    website: initiative.website || null,\n    phone: initiative.phone || null,\n    email: initiative.email || null,\n    opening_hours: initiative.opening_hours || null,\n    user_id: initiative.user_id || null,\n  };\n}\n\n// ================================\n// TYPES POUR LES REQUÊTES RPC\n// ================================\n\n/**\n * Paramètres pour la fonction get_nearby_initiatives\n */\nexport interface GetNearbyInitiativesParams {\n  lat: number;\n  lng: number;\n  radius_km?: number;\n}\n\n/**\n * Paramètres pour la fonction get_initiatives_in_bounds\n */\nexport interface GetInitiativesInBoundsParams {\n  min_lat: number;\n  min_lng: number;\n  max_lat: number;\n  max_lng: number;\n}\n\n// ================================\n// TYPES D'ERREUR SUPABASE\n// ================================\n\n/**\n * Erreur Supabase typée\n */\nexport interface SupabaseError {\n  message: string;\n  details?: string;\n  hint?: string;\n  code?: string;\n}\n\n/**\n * Réponse Supabase avec gestion d'erreur\n */\nexport interface SupabaseResponse<T> {\n  data: T | null;\n  error: SupabaseError | null;\n}\n"],"names":["databaseInitiativeToInitiative","initiativeToDatabaseInitiative","dbInitiative","locationMatch","location","match","Error","lng","lat","split","map","Number","id","name","type","description","undefined","address","coordinates","verified","image_url","website","phone","email","opening_hours","user_id","created_at","updated_at","initiative"],"mappings":"AAAA;;;;;;;;CAQC;;;;;;;;;;;QA2QeA;eAAAA;;QAoCAC;eAAAA;;;AApCT,SAASD,+BACdE,YAAgC;IAEhC,kDAAkD;IAClD,MAAMC,gBAAgBD,aAAaE,QAAQ,CAACC,KAAK,CAAC;IAClD,IAAI,CAACF,eAAe;QAClB,MAAM,IAAIG,MAAM,CAAC,yBAAyB,EAAEJ,aAAaE,QAAQ,EAAE;IACrE;IAEA,MAAM,CAACG,KAAKC,IAAI,GAAGL,aAAa,CAAC,EAAE,CAACM,KAAK,CAAC,KAAKC,GAAG,CAACC;IAEnD,OAAO;QACLC,IAAIV,aAAaU,EAAE;QACnBC,MAAMX,aAAaW,IAAI;QACvBC,MAAMZ,aAAaY,IAAI;QACvBC,aAAab,aAAaa,WAAW,IAAIC;QACzCC,SAASf,aAAae,OAAO,IAAID;QACjCZ,UAAU;YACRU,MAAM;YACNI,aAAa;gBAACX;gBAAKC;aAAI;QACzB;QACAW,UAAUjB,aAAaiB,QAAQ;QAC/BC,WAAWlB,aAAakB,SAAS,IAAIJ;QACrCK,SAASnB,aAAamB,OAAO,IAAIL;QACjCM,OAAOpB,aAAaoB,KAAK,IAAIN;QAC7BO,OAAOrB,aAAaqB,KAAK,IAAIP;QAC7BQ,eAAetB,aAAasB,aAAa,IAAIR;QAC7CS,SAASvB,aAAauB,OAAO,IAAIT;QACjCU,YAAYxB,aAAawB,UAAU;QACnCC,YAAYzB,aAAayB,UAAU;IACrC;AACF;AAKO,SAAS1B,+BACd2B,UAA+B;IAE/B,MAAMxB,WAAWwB,WAAWxB,QAAQ,GAChC,CAAC,MAAM,EAAEwB,WAAWxB,QAAQ,CAACc,WAAW,CAAC,EAAE,CAAC,CAAC,EAAEU,WAAWxB,QAAQ,CAACc,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,GACpFF;IAEJ,OAAO;QACLJ,IAAIgB,WAAWhB,EAAE;QACjBC,MAAMe,WAAWf,IAAI,IAAI;QACzBC,MAAMc,WAAWd,IAAI,IAAI;QACzBC,aAAaa,WAAWb,WAAW,IAAI;QACvCE,SAASW,WAAWX,OAAO,IAAI;QAC/Bb,UAAUA,YAAY;QACtBe,UAAUS,WAAWT,QAAQ,IAAI;QACjCC,WAAWQ,WAAWR,SAAS,IAAI;QACnCC,SAASO,WAAWP,OAAO,IAAI;QAC/BC,OAAOM,WAAWN,KAAK,IAAI;QAC3BC,OAAOK,WAAWL,KAAK,IAAI;QAC3BC,eAAeI,WAAWJ,aAAa,IAAI;QAC3CC,SAASG,WAAWH,OAAO,IAAI;IACjC;AACF"}