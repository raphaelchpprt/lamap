55e8221c9bfb4823a2f3b01781e9ae46
/**
 * Tests for utility functions
 *
 * Tests distance calculations, date formatting, and other helpers.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _utils = require("../../lib/utils");
describe('Utils', ()=>{
    describe('cn (className utility)', ()=>{
        it('should merge class names', ()=>{
            const result = (0, _utils.cn)('class1', 'class2');
            expect(result).toBe('class1 class2');
        });
        it('should handle conditional classes', ()=>{
            const result = (0, _utils.cn)('base', false && 'hidden', 'visible');
            expect(result).toBe('base visible');
        });
        it('should merge Tailwind classes correctly', ()=>{
            const result = (0, _utils.cn)('px-2 py-1', 'px-4');
            expect(result).toContain('px-4');
            expect(result).not.toContain('px-2');
        });
        it('should handle undefined and null', ()=>{
            const result = (0, _utils.cn)('base', undefined, null, 'end');
            expect(result).toBe('base end');
        });
    });
    describe('calculateDistance', ()=>{
        it('should calculate distance between Paris and Lyon', ()=>{
            // Paris: [2.3522, 48.8566]
            // Lyon: [4.8357, 45.7640]
            const paris = [
                2.3522,
                48.8566
            ];
            const lyon = [
                4.8357,
                45.764
            ];
            const distance = (0, _utils.calculateDistance)(paris, lyon);
            // Distance should be approximately 392 km
            expect(distance).toBeGreaterThan(390);
            expect(distance).toBeLessThan(395);
        });
        it('should return 0 for same coordinates', ()=>{
            const point = [
                2.3522,
                48.8566
            ];
            const distance = (0, _utils.calculateDistance)(point, point);
            expect(distance).toBe(0);
        });
        it('should handle coordinates at opposite sides of Earth', ()=>{
            // Maximum distance on Earth's surface (â‰ˆ 20,000 km)
            const point1 = [
                0,
                0
            ];
            const point2 = [
                180,
                0
            ];
            const distance = (0, _utils.calculateDistance)(point1, point2);
            expect(distance).toBeGreaterThan(19000);
            expect(distance).toBeLessThan(21000);
        });
        it('should handle negative coordinates', ()=>{
            const sydney = [
                151.2093,
                -33.8688
            ];
            const buenosAires = [
                -58.3816,
                -34.6037
            ];
            const distance = (0, _utils.calculateDistance)(sydney, buenosAires);
            // Sydney to Buenos Aires
            expect(distance).toBeGreaterThan(11000);
        });
    });
    describe('formatDate', ()=>{
        it('should format ISO date to French long format', ()=>{
            const result = (0, _utils.formatDate)('2025-01-15T10:30:00Z', 'long');
            expect(result).toContain('janvier');
            expect(result).toContain('2025');
        });
        it('should format ISO date to French short format', ()=>{
            const result = (0, _utils.formatDate)('2025-01-15T10:30:00Z', 'short');
            expect(result).toMatch(/15\/01\/2025/);
        });
        it('should handle Date objects', ()=>{
            const date = new Date('2025-01-15T10:30:00Z');
            const result = (0, _utils.formatDate)(date, 'short');
            expect(result).toContain('2025');
        });
        it('should format relative time for today', ()=>{
            const now = new Date();
            const result = (0, _utils.formatDate)(now, 'relative');
            expect(result).toBe("Aujourd'hui");
        });
        it('should format relative time for yesterday', ()=>{
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            const result = (0, _utils.formatDate)(yesterday, 'relative');
            expect(result).toBe('Hier');
        });
    });
    describe('formatDistance', ()=>{
        it('should format distance less than 1 km in meters', ()=>{
            expect((0, _utils.formatDistance)(0.5)).toBe('500 m');
            expect((0, _utils.formatDistance)(0.123)).toBe('123 m');
        });
        it('should format distance greater than 1 km', ()=>{
            expect((0, _utils.formatDistance)(15.3)).toContain('km');
            expect((0, _utils.formatDistance)(100)).toContain('km');
        });
        it('should round distances correctly', ()=>{
            expect((0, _utils.formatDistance)(0.999)).toBe('999 m');
            expect((0, _utils.formatDistance)(1.5)).toContain('1,5');
        });
    });
    describe('isValidEmail', ()=>{
        it('should validate correct email addresses', ()=>{
            expect((0, _utils.isValidEmail)('test@example.com')).toBe(true);
            expect((0, _utils.isValidEmail)('user.name@domain.co.uk')).toBe(true);
            expect((0, _utils.isValidEmail)('user+tag@example.com')).toBe(true);
        });
        it('should reject invalid email addresses', ()=>{
            expect((0, _utils.isValidEmail)('invalid')).toBe(false);
            expect((0, _utils.isValidEmail)('missing@domain')).toBe(false);
            expect((0, _utils.isValidEmail)('@nodomain.com')).toBe(false);
            expect((0, _utils.isValidEmail)('no-at-sign.com')).toBe(false);
        });
        it('should handle empty strings', ()=>{
            expect((0, _utils.isValidEmail)('')).toBe(false);
        });
        it('should handle undefined and null', ()=>{
            expect((0, _utils.isValidEmail)(undefined)).toBe(false);
            expect((0, _utils.isValidEmail)(null)).toBe(false);
        });
    });
    describe('isValidFrenchPhone', ()=>{
        it('should validate French phone numbers', ()=>{
            expect((0, _utils.isValidFrenchPhone)('0123456789')).toBe(true);
            expect((0, _utils.isValidFrenchPhone)('01 23 45 67 89')).toBe(true);
            expect((0, _utils.isValidFrenchPhone)('+33123456789')).toBe(true);
            expect((0, _utils.isValidFrenchPhone)('+33 1 23 45 67 89')).toBe(true);
        });
        it('should reject invalid phone numbers', ()=>{
            expect((0, _utils.isValidFrenchPhone)('123')).toBe(false);
            expect((0, _utils.isValidFrenchPhone)('abcdefghij')).toBe(false);
            expect((0, _utils.isValidFrenchPhone)('0023456789')).toBe(false); // Starts with 00
        });
        it('should handle empty strings', ()=>{
            expect((0, _utils.isValidFrenchPhone)('')).toBe(false);
        });
        it('should handle numbers with different separators', ()=>{
            expect((0, _utils.isValidFrenchPhone)('01.23.45.67.89')).toBe(true);
            expect((0, _utils.isValidFrenchPhone)('01-23-45-67-89')).toBe(true);
        });
    });
    describe('formatPhoneNumber', ()=>{
        it('should format French phone numbers', ()=>{
            const result = (0, _utils.formatPhoneNumber)('0123456789');
            expect(result).toBe('01 23 45 67 89');
        });
        it('should format international numbers', ()=>{
            const result = (0, _utils.formatPhoneNumber)('33123456789');
            expect(result).toContain('+33');
        });
        it('should handle already formatted numbers', ()=>{
            const input = '01 23 45 67 89';
            const result = (0, _utils.formatPhoneNumber)(input);
            expect(result).toContain('23');
        });
    });
    describe('truncate', ()=>{
        it('should truncate long text', ()=>{
            const result = (0, _utils.truncate)('This is a very long text', 10);
            expect(result).toBe('This is a ...');
            expect(result.length).toBe(13); // 10 + '...'
        });
        it('should not truncate short text', ()=>{
            const result = (0, _utils.truncate)('Short', 10);
            expect(result).toBe('Short');
        });
        it('should handle exact length', ()=>{
            const result = (0, _utils.truncate)('Exactly10!', 10);
            expect(result).toBe('Exactly10!');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,