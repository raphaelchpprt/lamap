{"version":3,"sources":["/Users/Raphael/Documents/DEV.nosync/lamap/src/__tests__/lib/utils.test.ts"],"sourcesContent":["/**\n * Tests for utility functions\n *\n * Tests distance calculations, date formatting, and other helpers.\n */\n\nimport {\n  calculateDistance,\n  cn,\n  formatDate,\n  formatDistance,\n  formatPhoneNumber,\n  isValidEmail,\n  isValidFrenchPhone,\n  truncate,\n} from '@/lib/utils';\n\ndescribe('Utils', () => {\n  describe('cn (className utility)', () => {\n    it('should merge class names', () => {\n      const result = cn('class1', 'class2');\n      expect(result).toBe('class1 class2');\n    });\n\n    it('should handle conditional classes', () => {\n      const result = cn('base', false && 'hidden', 'visible');\n      expect(result).toBe('base visible');\n    });\n\n    it('should merge Tailwind classes correctly', () => {\n      const result = cn('px-2 py-1', 'px-4');\n      expect(result).toContain('px-4');\n      expect(result).not.toContain('px-2');\n    });\n\n    it('should handle undefined and null', () => {\n      const result = cn('base', undefined, null, 'end');\n      expect(result).toBe('base end');\n    });\n  });\n\n  describe('calculateDistance', () => {\n    it('should calculate distance between Paris and Lyon', () => {\n      // Paris: [2.3522, 48.8566]\n      // Lyon: [4.8357, 45.7640]\n      const paris: [number, number] = [2.3522, 48.8566];\n      const lyon: [number, number] = [4.8357, 45.764];\n      const distance = calculateDistance(paris, lyon);\n\n      // Distance should be approximately 392 km\n      expect(distance).toBeGreaterThan(390);\n      expect(distance).toBeLessThan(395);\n    });\n\n    it('should return 0 for same coordinates', () => {\n      const point: [number, number] = [2.3522, 48.8566];\n      const distance = calculateDistance(point, point);\n      expect(distance).toBe(0);\n    });\n\n    it('should handle coordinates at opposite sides of Earth', () => {\n      // Maximum distance on Earth's surface (â‰ˆ 20,000 km)\n      const point1: [number, number] = [0, 0];\n      const point2: [number, number] = [180, 0];\n      const distance = calculateDistance(point1, point2);\n      expect(distance).toBeGreaterThan(19000);\n      expect(distance).toBeLessThan(21000);\n    });\n\n    it('should handle negative coordinates', () => {\n      const sydney: [number, number] = [151.2093, -33.8688];\n      const buenosAires: [number, number] = [-58.3816, -34.6037];\n      const distance = calculateDistance(sydney, buenosAires);\n      // Sydney to Buenos Aires\n      expect(distance).toBeGreaterThan(11000);\n    });\n  });\n\n  describe('formatDate', () => {\n    it('should format ISO date to French long format', () => {\n      const result = formatDate('2025-01-15T10:30:00Z', 'long');\n      expect(result).toContain('janvier');\n      expect(result).toContain('2025');\n    });\n\n    it('should format ISO date to French short format', () => {\n      const result = formatDate('2025-01-15T10:30:00Z', 'short');\n      expect(result).toMatch(/15\\/01\\/2025/);\n    });\n\n    it('should handle Date objects', () => {\n      const date = new Date('2025-01-15T10:30:00Z');\n      const result = formatDate(date, 'short');\n      expect(result).toContain('2025');\n    });\n\n    it('should format relative time for today', () => {\n      const now = new Date();\n      const result = formatDate(now, 'relative');\n      expect(result).toBe(\"Aujourd'hui\");\n    });\n\n    it('should format relative time for yesterday', () => {\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const result = formatDate(yesterday, 'relative');\n      expect(result).toBe('Hier');\n    });\n  });\n\n  describe('formatDistance', () => {\n    it('should format distance less than 1 km in meters', () => {\n      expect(formatDistance(0.5)).toBe('500 m');\n      expect(formatDistance(0.123)).toBe('123 m');\n    });\n\n    it('should format distance greater than 1 km', () => {\n      expect(formatDistance(15.3)).toContain('km');\n      expect(formatDistance(100)).toContain('km');\n    });\n\n    it('should round distances correctly', () => {\n      expect(formatDistance(0.999)).toBe('999 m');\n      expect(formatDistance(1.5)).toContain('1,5');\n    });\n  });\n\n  describe('isValidEmail', () => {\n    it('should validate correct email addresses', () => {\n      expect(isValidEmail('test@example.com')).toBe(true);\n      expect(isValidEmail('user.name@domain.co.uk')).toBe(true);\n      expect(isValidEmail('user+tag@example.com')).toBe(true);\n    });\n\n    it('should reject invalid email addresses', () => {\n      expect(isValidEmail('invalid')).toBe(false);\n      expect(isValidEmail('missing@domain')).toBe(false);\n      expect(isValidEmail('@nodomain.com')).toBe(false);\n      expect(isValidEmail('no-at-sign.com')).toBe(false);\n    });\n\n    it('should handle empty strings', () => {\n      expect(isValidEmail('')).toBe(false);\n    });\n\n    it('should handle undefined and null', () => {\n      expect(isValidEmail(undefined as unknown as string)).toBe(false);\n      expect(isValidEmail(null as unknown as string)).toBe(false);\n    });\n  });\n\n  describe('isValidFrenchPhone', () => {\n    it('should validate French phone numbers', () => {\n      expect(isValidFrenchPhone('0123456789')).toBe(true);\n      expect(isValidFrenchPhone('01 23 45 67 89')).toBe(true);\n      expect(isValidFrenchPhone('+33123456789')).toBe(true);\n      expect(isValidFrenchPhone('+33 1 23 45 67 89')).toBe(true);\n    });\n\n    it('should reject invalid phone numbers', () => {\n      expect(isValidFrenchPhone('123')).toBe(false);\n      expect(isValidFrenchPhone('abcdefghij')).toBe(false);\n      expect(isValidFrenchPhone('0023456789')).toBe(false); // Starts with 00\n    });\n\n    it('should handle empty strings', () => {\n      expect(isValidFrenchPhone('')).toBe(false);\n    });\n\n    it('should handle numbers with different separators', () => {\n      expect(isValidFrenchPhone('01.23.45.67.89')).toBe(true);\n      expect(isValidFrenchPhone('01-23-45-67-89')).toBe(true);\n    });\n  });\n\n  describe('formatPhoneNumber', () => {\n    it('should format French phone numbers', () => {\n      const result = formatPhoneNumber('0123456789');\n      expect(result).toBe('01 23 45 67 89');\n    });\n\n    it('should format international numbers', () => {\n      const result = formatPhoneNumber('33123456789');\n      expect(result).toContain('+33');\n    });\n\n    it('should handle already formatted numbers', () => {\n      const input = '01 23 45 67 89';\n      const result = formatPhoneNumber(input);\n      expect(result).toContain('23');\n    });\n  });\n\n  describe('truncate', () => {\n    it('should truncate long text', () => {\n      const result = truncate('This is a very long text', 10);\n      expect(result).toBe('This is a ...');\n      expect(result.length).toBe(13); // 10 + '...'\n    });\n\n    it('should not truncate short text', () => {\n      const result = truncate('Short', 10);\n      expect(result).toBe('Short');\n    });\n\n    it('should handle exact length', () => {\n      const result = truncate('Exactly10!', 10);\n      expect(result).toBe('Exactly10!');\n    });\n  });\n});\n"],"names":["describe","it","result","cn","expect","toBe","toContain","not","undefined","paris","lyon","distance","calculateDistance","toBeGreaterThan","toBeLessThan","point","point1","point2","sydney","buenosAires","formatDate","toMatch","date","Date","now","yesterday","setDate","getDate","formatDistance","isValidEmail","isValidFrenchPhone","formatPhoneNumber","input","truncate","length"],"mappings":"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"}