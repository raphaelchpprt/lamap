0ff6a1194831bfcd1233292af2773fa4
/**
 * Utilities and helper functions for LaMap
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get calculateDistance () {
        return calculateDistance;
    },
    get cn () {
        return cn;
    },
    get copyToClipboard () {
        return copyToClipboard;
    },
    get createGeoJSONPoint () {
        return createGeoJSONPoint;
    },
    get debounce () {
        return debounce;
    },
    get extractCoordinates () {
        return extractCoordinates;
    },
    get filterByDistance () {
        return filterByDistance;
    },
    get formatDate () {
        return formatDate;
    },
    get formatDistance () {
        return formatDistance;
    },
    get formatPhoneNumber () {
        return formatPhoneNumber;
    },
    get generateSEODescription () {
        return generateSEODescription;
    },
    get generateShareUrl () {
        return generateShareUrl;
    },
    get getCurrentPosition () {
        return getCurrentPosition;
    },
    get getSearchParam () {
        return getSearchParam;
    },
    get groupByType () {
        return groupByType;
    },
    get isValidEmail () {
        return isValidEmail;
    },
    get isValidFrenchPhone () {
        return isValidFrenchPhone;
    },
    get stringToColor () {
        return stringToColor;
    },
    get supportsGeolocation () {
        return supportsGeolocation;
    },
    get throttle () {
        return throttle;
    },
    get truncate () {
        return truncate;
    }
});
const _clsx = require("clsx");
const _tailwindmerge = require("tailwind-merge");
function cn(...inputs) {
    return (0, _tailwindmerge.twMerge)((0, _clsx.clsx)(inputs));
}
function formatDate(date, format = 'long') {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    if (format === 'short') {
        return new Intl.DateTimeFormat('fr-FR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        }).format(dateObj);
    }
    if (format === 'relative') {
        const now = new Date();
        const diffInMs = now.getTime() - dateObj.getTime();
        const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));
        if (diffInDays === 0) return "Aujourd'hui";
        if (diffInDays === 1) return 'Hier';
        if (diffInDays < 7) return `Il y a ${diffInDays} jours`;
        if (diffInDays < 30) return `Il y a ${Math.floor(diffInDays / 7)} semaines`;
        if (diffInDays < 365) return `Il y a ${Math.floor(diffInDays / 30)} mois`;
        return `Il y a ${Math.floor(diffInDays / 365)} ans`;
    }
    return new Intl.DateTimeFormat('fr-FR', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    }).format(dateObj);
}
function calculateDistance(point1, point2) {
    const [lon1, lat1] = point1;
    const [lon2, lat2] = point2;
    const R = 6371; // Earth's radius in km
    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;
    return Math.round(distance * 10) / 10; // Round to 1 decimal
}
/**
 * Convert degrees to radians
 */ function toRad(degrees) {
    return degrees * (Math.PI / 180);
}
function formatDistance(distanceKm) {
    if (distanceKm < 1) {
        return `${Math.round(distanceKm * 1000)} m`;
    }
    return `${distanceKm.toLocaleString('fr-FR')} km`;
}
function extractCoordinates(location) {
    const [longitude, latitude] = location.coordinates;
    return {
        latitude,
        longitude
    };
}
function createGeoJSONPoint(latitude, longitude) {
    return {
        type: 'Point',
        coordinates: [
            longitude,
            latitude
        ]
    };
}
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}
function isValidFrenchPhone(phone) {
    const phoneRegex = /^(?:(?:\+|00)33|0)\s*[1-9](?:[\s.-]*\d{2}){4}$/;
    return phoneRegex.test(phone);
}
function formatPhoneNumber(phone) {
    const cleaned = phone.replace(/\D/g, '');
    if (cleaned.startsWith('33')) {
        const withoutPrefix = cleaned.substring(2);
        return `+33 ${withoutPrefix.match(/.{1,2}/g)?.join(' ')}`;
    }
    if (cleaned.length === 10) {
        return cleaned.match(/.{1,2}/g)?.join(' ') || phone;
    }
    return phone;
}
function truncate(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}
function stringToColor(str) {
    let hash = 0;
    for(let i = 0; i < str.length; i++){
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    let color = '#';
    for(let i = 0; i < 3; i++){
        const value = hash >> i * 8 & 0xff;
        color += ('00' + value.toString(16)).slice(-2);
    }
    return color;
}
function debounce(func, wait) {
    let timeout = null;
    return function executedFunction(...args) {
        const later = ()=>{
            timeout = null;
            func(...args);
        };
        if (timeout) {
            clearTimeout(timeout);
        }
        timeout = setTimeout(later, wait);
    };
}
function throttle(func, limit) {
    let inThrottle;
    return function executedFunction(...args) {
        if (!inThrottle) {
            func(...args);
            inThrottle = true;
            setTimeout(()=>inThrottle = false, limit);
        }
    };
}
function filterByDistance(initiatives, center, maxDistanceKm) {
    return initiatives.map((initiative)=>({
            ...initiative,
            distance: calculateDistance(center, initiative.location.coordinates)
        })).filter((initiative)=>initiative.distance <= maxDistanceKm).sort((a, b)=>a.distance - b.distance);
}
function groupByType(initiatives) {
    return initiatives.reduce((acc, initiative)=>{
        const type = initiative.type;
        if (!acc.has(type)) {
            acc.set(type, []);
        }
        acc.get(type)?.push(initiative);
        return acc;
    }, new Map());
}
async function copyToClipboard(text) {
    try {
        await navigator.clipboard.writeText(text);
        return true;
    } catch (err) {
        console.error('Error copying to clipboard:', err);
        return false;
    }
}
function generateShareUrl(initiativeId) {
    if (typeof window === 'undefined') return '';
    return `${window.location.origin}/initiatives/${initiativeId}`;
}
function getSearchParam(searchParams, key, defaultValue = '') {
    return searchParams.get(key) || defaultValue;
}
function generateSEODescription(initiative) {
    const { name, type, address, description } = initiative;
    let seoDescription = `${name} - ${type}`;
    if (address) {
        seoDescription += ` situé à ${address}`;
    }
    if (description) {
        seoDescription += `. ${truncate(description, 100)}`;
    }
    return seoDescription;
}
function supportsGeolocation() {
    return typeof navigator !== 'undefined' && 'geolocation' in navigator;
}
function getCurrentPosition() {
    return new Promise((resolve, reject)=>{
        if (!supportsGeolocation()) {
            reject(new Error('Geolocation not supported'));
            return;
        }
        navigator.geolocation.getCurrentPosition((position)=>{
            resolve({
                latitude: position.coords.latitude,
                longitude: position.coords.longitude
            });
        }, (error)=>{
            reject(error);
        }, {
            enableHighAccuracy: false,
            timeout: 5000,
            maximumAge: 0
        });
    });
}

//# sourceMappingURL=data:application/json;base64,