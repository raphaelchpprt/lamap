{"version":3,"sources":["/Users/Raphael/Documents/DEV.nosync/lamap/src/__tests__/app/actions.test.ts"],"sourcesContent":["/**\n * Tests for Server Actions\n *\n * These tests verify the CRUD operations for initiatives,\n * including validation, authentication, and authorization.\n */\n\nimport { revalidatePath } from 'next/cache';\n\nimport {\n  createInitiative,\n  deleteInitiative,\n  getInitiativeById,\n  updateInitiative,\n  verifyInitiative,\n} from '@/app/actions';\nimport { createClient } from '@/lib/supabase/server';\n\n// Mock dependencies\njest.mock('next/cache');\njest.mock('@/lib/supabase/server');\n\nconst mockCreateClient = createClient as jest.MockedFunction<\n  typeof createClient\n>;\nconst mockRevalidatePath = revalidatePath as jest.MockedFunction<\n  typeof revalidatePath\n>;\n\ndescribe('Server Actions', () => {\n  // Mock Supabase client\n  let mockSupabase: any;\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Setup mock Supabase client with chainable methods\n    const mockEq = jest.fn().mockReturnThis();\n    mockSupabase = {\n      auth: {\n        getUser: jest.fn(),\n      },\n      from: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      update: jest.fn(() => ({\n        eq: jest.fn().mockResolvedValue({ error: null }),\n      })),\n      delete: jest.fn(() => ({\n        eq: jest.fn().mockResolvedValue({ error: null }),\n      })),\n      select: jest.fn().mockReturnThis(),\n      eq: mockEq,\n      single: jest.fn(),\n    };\n\n    mockCreateClient.mockResolvedValue(mockSupabase);\n  });\n\n  describe('createInitiative', () => {\n    const validData = {\n      name: 'Test Initiative',\n      type: 'AMAP' as const,\n      description: 'A test initiative',\n      address: '123 Test Street',\n      latitude: 48.8566,\n      longitude: 2.3522,\n      website: 'https://test.com',\n      phone: '0123456789',\n      email: 'test@test.com',\n    };\n\n    it('should create an initiative successfully', async () => {\n      // Mock authenticated user\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      // Mock successful insert\n      mockSupabase.single.mockResolvedValue({\n        data: { id: 'initiative123' },\n        error: null,\n      });\n\n      const result = await createInitiative(validData);\n\n      expect(result.success).toBe(true);\n      expect(result.data?.id).toBe('initiative123');\n      expect(mockRevalidatePath).toHaveBeenCalledWith('/');\n    });\n\n    it('should fail if user is not authenticated', async () => {\n      // Mock unauthenticated\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: null,\n      });\n\n      const result = await createInitiative(validData);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('connecté');\n      expect(mockRevalidatePath).not.toHaveBeenCalled();\n    });\n\n    it('should validate name length (minimum 3 characters)', async () => {\n      const result = await createInitiative({\n        ...validData,\n        name: 'AB', // Too short\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('3 caractères');\n    });\n\n    it('should validate latitude bounds (-90 to 90)', async () => {\n      const result = await createInitiative({\n        ...validData,\n        latitude: 91, // Out of bounds\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Latitude');\n    });\n\n    it('should validate longitude bounds (-180 to 180)', async () => {\n      const result = await createInitiative({\n        ...validData,\n        longitude: 181, // Out of bounds\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Longitude');\n    });\n\n    it('should handle database errors gracefully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      mockSupabase.single.mockResolvedValue({\n        data: null,\n        error: { message: 'Database error' },\n      });\n\n      const result = await createInitiative(validData);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Database error');\n    });\n  });\n\n  describe('updateInitiative', () => {\n    const updateData = {\n      name: 'Updated Initiative',\n      description: 'Updated description',\n    };\n\n    it('should update an initiative successfully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      // Mock ownership check\n      mockSupabase.single.mockResolvedValueOnce({\n        data: { user_id: 'user123' },\n        error: null,\n      });\n\n      const result = await updateInitiative('initiative123', updateData);\n\n      expect(result.success).toBe(true);\n      expect(mockRevalidatePath).toHaveBeenCalledWith('/');\n    });\n\n    it('should fail if user is not authenticated', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: null,\n      });\n\n      const result = await updateInitiative('initiative123', updateData);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('connecté');\n    });\n\n    it('should fail if user does not own the initiative', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      // Mock initiative owned by different user\n      mockSupabase.single.mockResolvedValue({\n        data: { user_id: 'otherUser' },\n        error: null,\n      });\n\n      const result = await updateInitiative('initiative123', updateData);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('autorisé');\n    });\n\n    it('should validate updated name length', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      mockSupabase.single.mockResolvedValue({\n        data: { user_id: 'user123' },\n        error: null,\n      });\n\n      const result = await updateInitiative('initiative123', {\n        name: 'AB', // Too short\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('3 caractères');\n    });\n  });\n\n  describe('deleteInitiative', () => {\n    it('should delete an initiative successfully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      // Mock ownership check\n      mockSupabase.single.mockResolvedValue({\n        data: { user_id: 'user123' },\n        error: null,\n      });\n\n      // Mock successful delete\n      mockSupabase.eq.mockResolvedValue({\n        error: null,\n      });\n\n      const result = await deleteInitiative('initiative123');\n\n      expect(result.success).toBe(true);\n      expect(mockRevalidatePath).toHaveBeenCalledWith('/');\n    });\n\n    it('should fail if user is not authenticated', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: null,\n      });\n\n      const result = await deleteInitiative('initiative123');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('connecté');\n    });\n\n    it('should fail if user does not own the initiative', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      mockSupabase.single.mockResolvedValue({\n        data: { user_id: 'otherUser' },\n        error: null,\n      });\n\n      const result = await deleteInitiative('initiative123');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('supprimer');\n    });\n\n    it('should fail if initiative does not exist', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      mockSupabase.single.mockResolvedValue({\n        data: null,\n        error: { message: 'Not found' },\n      });\n\n      const result = await deleteInitiative('nonexistent');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('trouvée');\n    });\n  });\n\n  describe('verifyInitiative', () => {\n    it('should verify an initiative successfully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'admin123' } },\n        error: null,\n      });\n\n      mockSupabase.eq.mockResolvedValue({\n        error: null,\n      });\n\n      const result = await verifyInitiative('initiative123', true);\n\n      expect(result.success).toBe(true);\n      expect(mockRevalidatePath).toHaveBeenCalledWith('/');\n    });\n\n    it('should unverify an initiative successfully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'admin123' } },\n        error: null,\n      });\n\n      mockSupabase.eq.mockResolvedValue({\n        error: null,\n      });\n\n      const result = await verifyInitiative('initiative123', false);\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should fail if user is not authenticated', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: null,\n      });\n\n      const result = await verifyInitiative('initiative123', true);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('connecté');\n    });\n  });\n\n  describe('getInitiativeById', () => {\n    it('should fetch an initiative successfully', async () => {\n      const mockInitiative = {\n        id: 'initiative123',\n        name: 'Test Initiative',\n        type: 'AMAP',\n        description: 'A test',\n        address: '123 Test St',\n        website: 'https://test.com',\n        phone: '0123456789',\n        email: 'test@test.com',\n        verified: true,\n        created_at: '2025-01-01T00:00:00Z',\n      };\n\n      mockSupabase.single.mockResolvedValue({\n        data: mockInitiative,\n        error: null,\n      });\n\n      const result = await getInitiativeById('initiative123');\n\n      expect(result.success).toBe(true);\n      expect(result.data?.id).toBe('initiative123');\n      expect(result.data?.name).toBe('Test Initiative');\n    });\n\n    it('should fail if initiative does not exist', async () => {\n      mockSupabase.single.mockResolvedValue({\n        data: null,\n        error: { message: 'Not found' },\n      });\n\n      const result = await getInitiativeById('nonexistent');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('trouvée');\n    });\n\n    it('should validate ID format', async () => {\n      const result = await getInitiativeById('');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('valide');\n    });\n  });\n});\n"],"names":["jest","mock","mockCreateClient","createClient","mockRevalidatePath","revalidatePath","describe","mockSupabase","beforeEach","clearAllMocks","mockEq","fn","mockReturnThis","auth","getUser","from","insert","update","eq","mockResolvedValue","error","delete","select","single","validData","name","type","description","address","latitude","longitude","website","phone","email","it","data","user","id","result","createInitiative","expect","success","toBe","toHaveBeenCalledWith","toContain","not","toHaveBeenCalled","message","updateData","mockResolvedValueOnce","user_id","updateInitiative","deleteInitiative","verifyInitiative","mockInitiative","verified","created_at","getInitiativeById"],"mappings":"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"}