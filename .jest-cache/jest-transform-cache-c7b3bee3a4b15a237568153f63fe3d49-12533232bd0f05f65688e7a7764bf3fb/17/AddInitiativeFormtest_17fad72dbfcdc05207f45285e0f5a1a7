82324a5f94fdc90386fbc2e635faf9ff
/**
 * Tests for AddInitiativeForm component
 *
 * Tests the form validation, submission, and error handling.
 */ "use strict";
// Mock the server action
jest.mock('@/app/actions', ()=>({
        createInitiative: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _actions = require("../../app/actions");
const _AddInitiativeForm = /*#__PURE__*/ _interop_require_default(require("../../components/AddInitiativeForm"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockCreateInitiative = _actions.createInitiative;
describe('AddInitiativeForm', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('should render all form fields', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {}));
        expect(_react.screen.getByLabelText(/Initiative Name/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Initiative Type/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Description/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Adresse/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Latitude/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Longitude/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Site web/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Téléphone/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/Email/i)).toBeInTheDocument();
    });
    it('should display submit button', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {}));
        const submitButton = _react.screen.getByRole('button', {
            name: /Ajouter l'initiative/i
        });
        expect(submitButton).toBeInTheDocument();
        expect(submitButton).not.toBeDisabled();
    });
    it('should display cancel button when onCancel is provided', ()=>{
        const mockCancel = jest.fn();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {
            onCancel: mockCancel
        }));
        const cancelButton = _react.screen.getByRole('button', {
            name: /Annuler/i
        });
        expect(cancelButton).toBeInTheDocument();
    });
    it('should not display cancel button when onCancel is not provided', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {}));
        const cancelButton = _react.screen.queryByRole('button', {
            name: /Annuler/i
        });
        expect(cancelButton).not.toBeInTheDocument();
    });
    it('should call onCancel when cancel button is clicked', async ()=>{
        const user = _userevent.default.setup();
        const mockCancel = jest.fn();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {
            onCancel: mockCancel
        }));
        const cancelButton = _react.screen.getByRole('button', {
            name: /Annuler/i
        });
        await user.click(cancelButton);
        expect(mockCancel).toHaveBeenCalledTimes(1);
    });
    it('should show validation error for missing required fields', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {}));
        const submitButton = _react.screen.getByRole('button', {
            name: /Ajouter l'initiative/i
        });
        _react.fireEvent.click(submitButton);
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText(/Veuillez remplir tous les champs obligatoires/i)).toBeInTheDocument();
        });
    });
    it('should submit form with valid data', async ()=>{
        const user = _userevent.default.setup();
        const mockSuccess = jest.fn();
        mockCreateInitiative.mockResolvedValue({
            success: true,
            data: {
                id: 'initiative123'
            }
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {
            onSuccess: mockSuccess
        }));
        // Fill in required fields
        await user.type(_react.screen.getByLabelText(/Initiative Name/i), 'Test AMAP');
        const typeSelect = _react.screen.getByLabelText(/Initiative Type/i);
        await user.selectOptions(typeSelect, 'AMAP');
        await user.type(_react.screen.getByLabelText(/Latitude/i), '48.8566');
        await user.type(_react.screen.getByLabelText(/Longitude/i), '2.3522');
        // Submit form
        const submitButton = _react.screen.getByRole('button', {
            name: /Ajouter l'initiative/i
        });
        await user.click(submitButton);
        await (0, _react.waitFor)(()=>{
            expect(mockCreateInitiative).toHaveBeenCalledWith({
                name: 'Test AMAP',
                type: 'AMAP',
                latitude: 48.8566,
                longitude: 2.3522
            });
            expect(mockSuccess).toHaveBeenCalled();
        });
    });
    it('should submit form with all fields filled', async ()=>{
        const user = _userevent.default.setup();
        mockCreateInitiative.mockResolvedValue({
            success: true,
            data: {
                id: 'initiative123'
            }
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {}));
        // Fill in all fields
        await user.type(_react.screen.getByLabelText(/Initiative Name/i), 'Test AMAP');
        const typeSelect = _react.screen.getByLabelText(/Initiative Type/i);
        await user.selectOptions(typeSelect, 'AMAP');
        await user.type(_react.screen.getByLabelText(/Description/i), 'A great initiative');
        await user.type(_react.screen.getByLabelText(/Adresse/i), '123 Test Street, Paris');
        await user.type(_react.screen.getByLabelText(/Latitude/i), '48.8566');
        await user.type(_react.screen.getByLabelText(/Longitude/i), '2.3522');
        await user.type(_react.screen.getByLabelText(/Site web/i), 'https://test.com');
        await user.type(_react.screen.getByLabelText(/Téléphone/i), '0123456789');
        await user.type(_react.screen.getByLabelText(/Email/i), 'test@test.com');
        const submitButton = _react.screen.getByRole('button', {
            name: /Ajouter l'initiative/i
        });
        await user.click(submitButton);
        await (0, _react.waitFor)(()=>{
            expect(mockCreateInitiative).toHaveBeenCalledWith({
                name: 'Test AMAP',
                type: 'AMAP',
                description: 'A great initiative',
                address: '123 Test Street, Paris',
                latitude: 48.8566,
                longitude: 2.3522,
                website: 'https://test.com',
                phone: '0123456789',
                email: 'test@test.com'
            });
        });
    });
    it('should display error message on submission failure', async ()=>{
        const user = _userevent.default.setup();
        mockCreateInitiative.mockResolvedValue({
            success: false,
            error: 'Vous devez être connecté'
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {}));
        // Fill in required fields
        await user.type(_react.screen.getByLabelText(/Initiative Name/i), 'Test AMAP');
        const typeSelect = _react.screen.getByLabelText(/Initiative Type/i);
        await user.selectOptions(typeSelect, 'AMAP');
        await user.type(_react.screen.getByLabelText(/Latitude/i), '48.8566');
        await user.type(_react.screen.getByLabelText(/Longitude/i), '2.3522');
        const submitButton = _react.screen.getByRole('button', {
            name: /Ajouter l'initiative/i
        });
        await user.click(submitButton);
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText(/Vous devez être connecté/i)).toBeInTheDocument();
        });
    });
    it('should disable submit button while submitting', async ()=>{
        const user = _userevent.default.setup();
        // Make the mock take some time to resolve
        mockCreateInitiative.mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                        success: true,
                        data: {
                            id: 'test'
                        }
                    }), 100)));
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {}));
        // Fill in required fields
        await user.type(_react.screen.getByLabelText(/Initiative Name/i), 'Test');
        const typeSelect = _react.screen.getByLabelText(/Initiative Type/i);
        await user.selectOptions(typeSelect, 'AMAP');
        await user.type(_react.screen.getByLabelText(/Latitude/i), '48.8566');
        await user.type(_react.screen.getByLabelText(/Longitude/i), '2.3522');
        const submitButton = _react.screen.getByRole('button', {
            name: /Ajouter l'initiative/i
        });
        await user.click(submitButton);
        // Button should be disabled during submission
        expect(submitButton).toBeDisabled();
        expect(_react.screen.getByText(/Ajout en cours/i)).toBeInTheDocument();
        await (0, _react.waitFor)(()=>{
            expect(submitButton).not.toBeDisabled();
        });
    });
    it('should reset form after successful submission', async ()=>{
        const user = _userevent.default.setup();
        mockCreateInitiative.mockResolvedValue({
            success: true,
            data: {
                id: 'initiative123'
            }
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {}));
        const nameInput = _react.screen.getByLabelText(/Initiative Name/i);
        await user.type(nameInput, 'Test AMAP');
        const typeSelect = _react.screen.getByLabelText(/Initiative Type/i);
        await user.selectOptions(typeSelect, 'AMAP');
        await user.type(_react.screen.getByLabelText(/Latitude/i), '48.8566');
        await user.type(_react.screen.getByLabelText(/Longitude/i), '2.3522');
        const submitButton = _react.screen.getByRole('button', {
            name: /Ajouter l'initiative/i
        });
        await user.click(submitButton);
        await (0, _react.waitFor)(()=>{
            expect(nameInput.value).toBe('');
        });
    });
    it('should render all initiative types in the select', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {}));
        const typeSelect = _react.screen.getByLabelText(/Initiative Type/i);
        const options = Array.from(typeSelect.querySelectorAll('option')).map((option)=>option.textContent);
        expect(options).toContain('Ressourcerie');
        expect(options).toContain('Repair Café');
        expect(options).toContain('AMAP');
        expect(options).toContain("Entreprise d'insertion");
        expect(options).toContain('Point de collecte');
        expect(options).toContain('Recyclerie');
        expect(options).toContain('Épicerie sociale');
        expect(options).toContain('Jardin partagé');
        expect(options).toContain('Fab Lab');
        expect(options).toContain('Coopérative');
        expect(options).toContain('Monnaie locale');
        expect(options).toContain('Tiers-lieu');
        expect(options).toContain('Autre');
    });
    it('should handle invalid number inputs gracefully', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AddInitiativeForm.default, {}));
        const submitButton = _react.screen.getByRole('button', {
            name: /Ajouter l'initiative/i
        });
        // Don't fill lat/lng (invalid numbers)
        _react.fireEvent.click(submitButton);
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText(/Veuillez remplir tous les champs obligatoires/i)).toBeInTheDocument();
        });
        expect(mockCreateInitiative).not.toHaveBeenCalled();
    });
});

//# sourceMappingURL=data:application/json;base64,