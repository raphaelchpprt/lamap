{"version":3,"sources":["/Users/Raphael/Documents/DEV.nosync/lamap/src/__tests__/app/actions.test.ts"],"sourcesContent":["/**\n * Tests for Server Actions\n *\n * These tests verify the CRUD operations for initiatives,\n * including validation, authentication, and authorization.\n */\n\nimport { revalidatePath } from 'next/cache';\n\nimport {\n  createInitiative,\n  deleteInitiative,\n  getInitiativeById,\n  updateInitiative,\n  verifyInitiative,\n} from '@/app/actions';\nimport { createClient } from '@/lib/supabase/server';\n\n// Mock dependencies\njest.mock('@/lib/supabase/server');\njest.mock('next/cache');\n\nconst mockCreateClient = createClient as jest.MockedFunction<\n  typeof createClient\n>;\nconst mockRevalidatePath = revalidatePath as jest.MockedFunction<\n  typeof revalidatePath\n>;\n\ndescribe('Server Actions', () => {\n  // Mock Supabase client\n  let mockSupabase: any;\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Setup mock Supabase client\n    mockSupabase = {\n      auth: {\n        getUser: jest.fn(),\n      },\n      from: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      update: jest.fn().mockReturnThis(),\n      delete: jest.fn().mockReturnThis(),\n      select: jest.fn().mockReturnThis(),\n      eq: jest.fn().mockReturnThis(),\n      single: jest.fn(),\n    };\n\n    mockCreateClient.mockResolvedValue(mockSupabase);\n  });\n\n  describe('createInitiative', () => {\n    const validData = {\n      name: 'Test Initiative',\n      type: 'AMAP' as const,\n      description: 'A test initiative',\n      address: '123 Test Street',\n      latitude: 48.8566,\n      longitude: 2.3522,\n      website: 'https://test.com',\n      phone: '0123456789',\n      email: 'test@test.com',\n    };\n\n    it('should create an initiative successfully', async () => {\n      // Mock authenticated user\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      // Mock successful insert\n      mockSupabase.single.mockResolvedValue({\n        data: { id: 'initiative123' },\n        error: null,\n      });\n\n      const result = await createInitiative(validData);\n\n      expect(result.success).toBe(true);\n      expect(result.data?.id).toBe('initiative123');\n      expect(mockRevalidatePath).toHaveBeenCalledWith('/');\n    });\n\n    it('should fail if user is not authenticated', async () => {\n      // Mock unauthenticated\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: null,\n      });\n\n      const result = await createInitiative(validData);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('connecté');\n      expect(mockRevalidatePath).not.toHaveBeenCalled();\n    });\n\n    it('should validate name length (minimum 3 characters)', async () => {\n      const result = await createInitiative({\n        ...validData,\n        name: 'AB', // Too short\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('3 caractères');\n    });\n\n    it('should validate latitude bounds (-90 to 90)', async () => {\n      const result = await createInitiative({\n        ...validData,\n        latitude: 91, // Out of bounds\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Latitude');\n    });\n\n    it('should validate longitude bounds (-180 to 180)', async () => {\n      const result = await createInitiative({\n        ...validData,\n        longitude: 181, // Out of bounds\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Longitude');\n    });\n\n    it('should handle database errors gracefully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      mockSupabase.single.mockResolvedValue({\n        data: null,\n        error: { message: 'Database error' },\n      });\n\n      const result = await createInitiative(validData);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Database error');\n    });\n  });\n\n  describe('updateInitiative', () => {\n    const updateData = {\n      name: 'Updated Initiative',\n      description: 'Updated description',\n    };\n\n    it('should update an initiative successfully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      // Mock ownership check\n      mockSupabase.single.mockResolvedValueOnce({\n        data: { user_id: 'user123' },\n        error: null,\n      });\n\n      // Mock successful update\n      mockSupabase.eq.mockResolvedValue({\n        error: null,\n      });\n\n      const result = await updateInitiative('initiative123', updateData);\n\n      expect(result.success).toBe(true);\n      expect(mockRevalidatePath).toHaveBeenCalledWith('/');\n    });\n\n    it('should fail if user is not authenticated', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: null,\n      });\n\n      const result = await updateInitiative('initiative123', updateData);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('connecté');\n    });\n\n    it('should fail if user does not own the initiative', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      // Mock initiative owned by different user\n      mockSupabase.single.mockResolvedValue({\n        data: { user_id: 'otherUser' },\n        error: null,\n      });\n\n      const result = await updateInitiative('initiative123', updateData);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('autorisé');\n    });\n\n    it('should validate updated name length', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      mockSupabase.single.mockResolvedValue({\n        data: { user_id: 'user123' },\n        error: null,\n      });\n\n      const result = await updateInitiative('initiative123', {\n        name: 'AB', // Too short\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('3 caractères');\n    });\n  });\n\n  describe('deleteInitiative', () => {\n    it('should delete an initiative successfully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      // Mock ownership check\n      mockSupabase.single.mockResolvedValue({\n        data: { user_id: 'user123' },\n        error: null,\n      });\n\n      // Mock successful delete\n      mockSupabase.eq.mockResolvedValue({\n        error: null,\n      });\n\n      const result = await deleteInitiative('initiative123');\n\n      expect(result.success).toBe(true);\n      expect(mockRevalidatePath).toHaveBeenCalledWith('/');\n    });\n\n    it('should fail if user is not authenticated', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: null,\n      });\n\n      const result = await deleteInitiative('initiative123');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('connecté');\n    });\n\n    it('should fail if user does not own the initiative', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      mockSupabase.single.mockResolvedValue({\n        data: { user_id: 'otherUser' },\n        error: null,\n      });\n\n      const result = await deleteInitiative('initiative123');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('supprimer');\n    });\n\n    it('should fail if initiative does not exist', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user123' } },\n        error: null,\n      });\n\n      mockSupabase.single.mockResolvedValue({\n        data: null,\n        error: { message: 'Not found' },\n      });\n\n      const result = await deleteInitiative('nonexistent');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('trouvée');\n    });\n  });\n\n  describe('verifyInitiative', () => {\n    it('should verify an initiative successfully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'admin123' } },\n        error: null,\n      });\n\n      mockSupabase.eq.mockResolvedValue({\n        error: null,\n      });\n\n      const result = await verifyInitiative('initiative123', true);\n\n      expect(result.success).toBe(true);\n      expect(mockRevalidatePath).toHaveBeenCalledWith('/');\n    });\n\n    it('should unverify an initiative successfully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'admin123' } },\n        error: null,\n      });\n\n      mockSupabase.eq.mockResolvedValue({\n        error: null,\n      });\n\n      const result = await verifyInitiative('initiative123', false);\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should fail if user is not authenticated', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: null,\n      });\n\n      const result = await verifyInitiative('initiative123', true);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('connecté');\n    });\n  });\n\n  describe('getInitiativeById', () => {\n    it('should fetch an initiative successfully', async () => {\n      const mockInitiative = {\n        id: 'initiative123',\n        name: 'Test Initiative',\n        type: 'AMAP',\n        description: 'A test',\n        address: '123 Test St',\n        website: 'https://test.com',\n        phone: '0123456789',\n        email: 'test@test.com',\n        verified: true,\n        created_at: '2025-01-01T00:00:00Z',\n      };\n\n      mockSupabase.single.mockResolvedValue({\n        data: mockInitiative,\n        error: null,\n      });\n\n      const result = await getInitiativeById('initiative123');\n\n      expect(result.success).toBe(true);\n      expect(result.data?.id).toBe('initiative123');\n      expect(result.data?.name).toBe('Test Initiative');\n    });\n\n    it('should fail if initiative does not exist', async () => {\n      mockSupabase.single.mockResolvedValue({\n        data: null,\n        error: { message: 'Not found' },\n      });\n\n      const result = await getInitiativeById('nonexistent');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('trouvée');\n    });\n\n    it('should validate ID format', async () => {\n      const result = await getInitiativeById('');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('valide');\n    });\n  });\n});\n"],"names":["jest","mock","mockCreateClient","createClient","mockRevalidatePath","revalidatePath","describe","mockSupabase","beforeEach","clearAllMocks","auth","getUser","fn","from","mockReturnThis","insert","update","delete","select","eq","single","mockResolvedValue","validData","name","type","description","address","latitude","longitude","website","phone","email","it","data","user","id","error","result","createInitiative","expect","success","toBe","toHaveBeenCalledWith","toContain","not","toHaveBeenCalled","message","updateData","mockResolvedValueOnce","user_id","updateInitiative","deleteInitiative","verifyInitiative","mockInitiative","verified","created_at","getInitiativeById"],"mappings":"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"}