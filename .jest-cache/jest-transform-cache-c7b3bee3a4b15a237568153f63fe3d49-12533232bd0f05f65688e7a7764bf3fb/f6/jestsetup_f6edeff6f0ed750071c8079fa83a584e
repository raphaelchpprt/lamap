213d1f1669e8e2fa5e824dc38c4c66a3
// Setup pour Jest - Configuration globale des tests
// Import des utilitaires de test
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
// Mock global pour window.matchMedia (nécessaire pour certains composants)
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock pour IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor(){}
    observe() {
        return null;
    }
    disconnect() {
        return null;
    }
    unobserve() {
        return null;
    }
};
// Mock pour ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor(callback){
        this.callback = callback;
    }
    observe() {
        return null;
    }
    unobserve() {
        return null;
    }
    disconnect() {
        return null;
    }
};
// Mock pour l'API Geolocation
const mockGeolocation = {
    getCurrentPosition: jest.fn().mockImplementation((success)=>Promise.resolve(success({
            coords: {
                latitude: 46.603354,
                longitude: 1.888334,
                accuracy: 1000
            }
        }))),
    watchPosition: jest.fn(),
    clearWatch: jest.fn()
};
Object.defineProperty(global.navigator, 'geolocation', {
    value: mockGeolocation
});
// Mock pour fetch (pour les appels API)
global.fetch = jest.fn();
// Variables d'environnement pour les tests
process.env.NEXT_PUBLIC_MAPBOX_TOKEN = 'pk.test_token_for_jest';
process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';
process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test_anon_key';
// Nettoyage après chaque test
afterEach(()=>{
    jest.clearAllMocks();
    // Reset fetch mock
    if (global.fetch && global.fetch.mockClear) {
        global.fetch.mockClear();
    }
});
// Configuration des timeouts pour les tests async
jest.setTimeout(10000);
// Mock console.error pour capturer les erreurs React
const originalError = console.error;
beforeAll(()=>{
    console.error = (...args)=>{
        if (typeof args[0] === 'string' && args[0].includes('Warning: ReactDOM.render is no longer supported')) {
            return;
        }
        originalError.call(console, ...args);
    };
});
afterAll(()=>{
    console.error = originalError;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9SYXBoYWVsL0RvY3VtZW50cy9ERVYubm9zeW5jL2xhbWFwL2plc3Quc2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU2V0dXAgcG91ciBKZXN0IC0gQ29uZmlndXJhdGlvbiBnbG9iYWxlIGRlcyB0ZXN0c1xuXG4vLyBJbXBvcnQgZGVzIHV0aWxpdGFpcmVzIGRlIHRlc3RcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5cbi8vIE1vY2sgZ2xvYmFsIHBvdXIgd2luZG93Lm1hdGNoTWVkaWEgKG7DqWNlc3NhaXJlIHBvdXIgY2VydGFpbnMgY29tcG9zYW50cylcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdtYXRjaE1lZGlhJywge1xuICB3cml0YWJsZTogdHJ1ZSxcbiAgdmFsdWU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHF1ZXJ5KSA9PiAoe1xuICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgIG1lZGlhOiBxdWVyeSxcbiAgICBvbmNoYW5nZTogbnVsbCxcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLCAvLyBkZXByZWNhdGVkXG4gICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxuICB9KSksXG59KTtcblxuLy8gTW9jayBwb3VyIEludGVyc2VjdGlvbk9ic2VydmVyXG5nbG9iYWwuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBjbGFzcyBJbnRlcnNlY3Rpb25PYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKCkge31cbiAgb2JzZXJ2ZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBkaXNjb25uZWN0KCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHVub2JzZXJ2ZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuLy8gTW9jayBwb3VyIFJlc2l6ZU9ic2VydmVyXG5nbG9iYWwuUmVzaXplT2JzZXJ2ZXIgPSBjbGFzcyBSZXNpemVPYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICB9XG4gIG9ic2VydmUoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdW5vYnNlcnZlKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGRpc2Nvbm5lY3QoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbi8vIE1vY2sgcG91ciBsJ0FQSSBHZW9sb2NhdGlvblxuY29uc3QgbW9ja0dlb2xvY2F0aW9uID0ge1xuICBnZXRDdXJyZW50UG9zaXRpb246IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHN1Y2Nlc3MpID0+XG4gICAgUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgc3VjY2Vzcyh7XG4gICAgICAgIGNvb3Jkczoge1xuICAgICAgICAgIGxhdGl0dWRlOiA0Ni42MDMzNTQsIC8vIENvb3Jkb25uw6llcyBkZSBsYSBGcmFuY2UgKGNlbnRyZSBhcHByb3hpbWF0aWYpXG4gICAgICAgICAgbG9uZ2l0dWRlOiAxLjg4ODMzNCxcbiAgICAgICAgICBhY2N1cmFjeTogMTAwMCxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKVxuICApLFxuICB3YXRjaFBvc2l0aW9uOiBqZXN0LmZuKCksXG4gIGNsZWFyV2F0Y2g6IGplc3QuZm4oKSxcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwubmF2aWdhdG9yLCAnZ2VvbG9jYXRpb24nLCB7XG4gIHZhbHVlOiBtb2NrR2VvbG9jYXRpb24sXG59KTtcblxuLy8gTW9jayBwb3VyIGZldGNoIChwb3VyIGxlcyBhcHBlbHMgQVBJKVxuZ2xvYmFsLmZldGNoID0gamVzdC5mbigpO1xuXG4vLyBWYXJpYWJsZXMgZCdlbnZpcm9ubmVtZW50IHBvdXIgbGVzIHRlc3RzXG5wcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19NQVBCT1hfVE9LRU4gPSAncGsudGVzdF90b2tlbl9mb3JfamVzdCc7XG5wcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwgPSAnaHR0cHM6Ly90ZXN0LnN1cGFiYXNlLmNvJztcbnByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZID0gJ3Rlc3RfYW5vbl9rZXknO1xuXG4vLyBOZXR0b3lhZ2UgYXByw6hzIGNoYXF1ZSB0ZXN0XG5hZnRlckVhY2goKCkgPT4ge1xuICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcblxuICAvLyBSZXNldCBmZXRjaCBtb2NrXG4gIGlmIChnbG9iYWwuZmV0Y2ggJiYgZ2xvYmFsLmZldGNoLm1vY2tDbGVhcikge1xuICAgIGdsb2JhbC5mZXRjaC5tb2NrQ2xlYXIoKTtcbiAgfVxufSk7XG5cbi8vIENvbmZpZ3VyYXRpb24gZGVzIHRpbWVvdXRzIHBvdXIgbGVzIHRlc3RzIGFzeW5jXG5qZXN0LnNldFRpbWVvdXQoMTAwMDApO1xuXG4vLyBNb2NrIGNvbnNvbGUuZXJyb3IgcG91ciBjYXB0dXJlciBsZXMgZXJyZXVycyBSZWFjdFxuY29uc3Qgb3JpZ2luYWxFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG5iZWZvcmVBbGwoKCkgPT4ge1xuICBjb25zb2xlLmVycm9yID0gKC4uLmFyZ3MpID0+IHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ1dhcm5pbmc6IFJlYWN0RE9NLnJlbmRlciBpcyBubyBsb25nZXIgc3VwcG9ydGVkJylcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3JpZ2luYWxFcnJvci5jYWxsKGNvbnNvbGUsIC4uLmFyZ3MpO1xuICB9O1xufSk7XG5cbmFmdGVyQWxsKCgpID0+IHtcbiAgY29uc29sZS5lcnJvciA9IG9yaWdpbmFsRXJyb3I7XG59KTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsIndyaXRhYmxlIiwidmFsdWUiLCJqZXN0IiwiZm4iLCJtb2NrSW1wbGVtZW50YXRpb24iLCJxdWVyeSIsIm1hdGNoZXMiLCJtZWRpYSIsIm9uY2hhbmdlIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsImdsb2JhbCIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJ1bm9ic2VydmUiLCJSZXNpemVPYnNlcnZlciIsImNhbGxiYWNrIiwibW9ja0dlb2xvY2F0aW9uIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwic3VjY2VzcyIsIlByb21pc2UiLCJyZXNvbHZlIiwiY29vcmRzIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJhY2N1cmFjeSIsIndhdGNoUG9zaXRpb24iLCJjbGVhcldhdGNoIiwibmF2aWdhdG9yIiwiZmV0Y2giLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfTUFQQk9YX1RPS0VOIiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJhZnRlckVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja0NsZWFyIiwic2V0VGltZW91dCIsIm9yaWdpbmFsRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJiZWZvcmVBbGwiLCJhcmdzIiwiaW5jbHVkZXMiLCJjYWxsIiwiYWZ0ZXJBbGwiXSwibWFwcGluZ3MiOiJBQUFBLG9EQUFvRDtBQUVwRCxpQ0FBaUM7Ozs7O1FBQzFCO0FBRVAsMkVBQTJFO0FBQzNFQSxPQUFPQyxjQUFjLENBQUNDLFFBQVEsY0FBYztJQUMxQ0MsVUFBVTtJQUNWQyxPQUFPQyxLQUFLQyxFQUFFLEdBQUdDLGtCQUFrQixDQUFDLENBQUNDLFFBQVcsQ0FBQTtZQUM5Q0MsU0FBUztZQUNUQyxPQUFPRjtZQUNQRyxVQUFVO1lBQ1ZDLGFBQWFQLEtBQUtDLEVBQUU7WUFDcEJPLGdCQUFnQlIsS0FBS0MsRUFBRTtZQUN2QlEsa0JBQWtCVCxLQUFLQyxFQUFFO1lBQ3pCUyxxQkFBcUJWLEtBQUtDLEVBQUU7WUFDNUJVLGVBQWVYLEtBQUtDLEVBQUU7UUFDeEIsQ0FBQTtBQUNGO0FBRUEsaUNBQWlDO0FBQ2pDVyxPQUFPQyxvQkFBb0IsR0FBRyxNQUFNQTtJQUNsQyxhQUFjLENBQUM7SUFDZkMsVUFBVTtRQUNSLE9BQU87SUFDVDtJQUNBQyxhQUFhO1FBQ1gsT0FBTztJQUNUO0lBQ0FDLFlBQVk7UUFDVixPQUFPO0lBQ1Q7QUFDRjtBQUVBLDJCQUEyQjtBQUMzQkosT0FBT0ssY0FBYyxHQUFHLE1BQU1BO0lBQzVCLFlBQVlDLFFBQVEsQ0FBRTtRQUNwQixJQUFJLENBQUNBLFFBQVEsR0FBR0E7SUFDbEI7SUFDQUosVUFBVTtRQUNSLE9BQU87SUFDVDtJQUNBRSxZQUFZO1FBQ1YsT0FBTztJQUNUO0lBQ0FELGFBQWE7UUFDWCxPQUFPO0lBQ1Q7QUFDRjtBQUVBLDhCQUE4QjtBQUM5QixNQUFNSSxrQkFBa0I7SUFDdEJDLG9CQUFvQnBCLEtBQUtDLEVBQUUsR0FBR0Msa0JBQWtCLENBQUMsQ0FBQ21CLFVBQ2hEQyxRQUFRQyxPQUFPLENBQ2JGLFFBQVE7WUFDTkcsUUFBUTtnQkFDTkMsVUFBVTtnQkFDVkMsV0FBVztnQkFDWEMsVUFBVTtZQUNaO1FBQ0Y7SUFHSkMsZUFBZTVCLEtBQUtDLEVBQUU7SUFDdEI0QixZQUFZN0IsS0FBS0MsRUFBRTtBQUNyQjtBQUVBTixPQUFPQyxjQUFjLENBQUNnQixPQUFPa0IsU0FBUyxFQUFFLGVBQWU7SUFDckQvQixPQUFPb0I7QUFDVDtBQUVBLHdDQUF3QztBQUN4Q1AsT0FBT21CLEtBQUssR0FBRy9CLEtBQUtDLEVBQUU7QUFFdEIsMkNBQTJDO0FBQzNDK0IsUUFBUUMsR0FBRyxDQUFDQyx3QkFBd0IsR0FBRztBQUN2Q0YsUUFBUUMsR0FBRyxDQUFDRSx3QkFBd0IsR0FBRztBQUN2Q0gsUUFBUUMsR0FBRyxDQUFDRyw2QkFBNkIsR0FBRztBQUU1Qyw4QkFBOEI7QUFDOUJDLFVBQVU7SUFDUnJDLEtBQUtzQyxhQUFhO0lBRWxCLG1CQUFtQjtJQUNuQixJQUFJMUIsT0FBT21CLEtBQUssSUFBSW5CLE9BQU9tQixLQUFLLENBQUNRLFNBQVMsRUFBRTtRQUMxQzNCLE9BQU9tQixLQUFLLENBQUNRLFNBQVM7SUFDeEI7QUFDRjtBQUVBLGtEQUFrRDtBQUNsRHZDLEtBQUt3QyxVQUFVLENBQUM7QUFFaEIscURBQXFEO0FBQ3JELE1BQU1DLGdCQUFnQkMsUUFBUUMsS0FBSztBQUNuQ0MsVUFBVTtJQUNSRixRQUFRQyxLQUFLLEdBQUcsQ0FBQyxHQUFHRTtRQUNsQixJQUNFLE9BQU9BLElBQUksQ0FBQyxFQUFFLEtBQUssWUFDbkJBLElBQUksQ0FBQyxFQUFFLENBQUNDLFFBQVEsQ0FBQyxvREFDakI7WUFDQTtRQUNGO1FBQ0FMLGNBQWNNLElBQUksQ0FBQ0wsWUFBWUc7SUFDakM7QUFDRjtBQUVBRyxTQUFTO0lBQ1BOLFFBQVFDLEtBQUssR0FBR0Y7QUFDbEIifQ==