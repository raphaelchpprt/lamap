{"version":3,"sources":["/Users/Raphael/Documents/DEV.nosync/lamap/src/lib/utils.ts"],"sourcesContent":["/**\n * Utilities and helper functions for LaMap\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nimport type { Initiative, GeoJSONPoint } from '@/types/initiative';\n\n/**\n * Merge Tailwind classes intelligently\n * Avoids class conflicts using tailwind-merge\n *\n * @example\n * cn('px-2 py-1', 'px-4') // => 'py-1 px-4'\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format a date in French locale\n *\n * @param date - Date to format (ISO string or Date object)\n * @param format - Output format\n * @returns Formatted date\n *\n * @example\n * formatDate('2024-01-15T10:00:00Z') // => \"15 janvier 2024\"\n * formatDate(new Date(), 'short') // => \"15/01/2024\"\n */\nexport function formatDate(\n  date: string | Date,\n  format: 'long' | 'short' | 'relative' = 'long'\n): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n\n  if (format === 'short') {\n    return new Intl.DateTimeFormat('fr-FR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n    }).format(dateObj);\n  }\n\n  if (format === 'relative') {\n    const now = new Date();\n    const diffInMs = now.getTime() - dateObj.getTime();\n    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n\n    if (diffInDays === 0) return \"Aujourd'hui\";\n    if (diffInDays === 1) return 'Hier';\n    if (diffInDays < 7) return `Il y a ${diffInDays} jours`;\n    if (diffInDays < 30) return `Il y a ${Math.floor(diffInDays / 7)} semaines`;\n    if (diffInDays < 365) return `Il y a ${Math.floor(diffInDays / 30)} mois`;\n    return `Il y a ${Math.floor(diffInDays / 365)} ans`;\n  }\n\n  return new Intl.DateTimeFormat('fr-FR', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n  }).format(dateObj);\n}\n\n/**\n * Calculate distance between two geographic points (Haversine formula)\n *\n * @param point1 - First point [longitude, latitude]\n * @param point2 - Second point [longitude, latitude]\n * @returns Distance in kilometers\n *\n * @example\n * const paris = [2.3522, 48.8566]\n * const lyon = [4.8357, 45.7640]\n * calculateDistance(paris, lyon) // => ~392 km\n */\nexport function calculateDistance(\n  point1: [number, number],\n  point2: [number, number]\n): number {\n  const [lon1, lat1] = point1;\n  const [lon2, lat2] = point2;\n\n  const R = 6371; // Earth's radius in km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRad(lat1)) *\n      Math.cos(toRad(lat2)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c;\n\n  return Math.round(distance * 10) / 10; // Round to 1 decimal\n}\n\n/**\n * Convert degrees to radians\n */\nfunction toRad(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}\n\n/**\n * Format distance in a readable way\n *\n * @param distanceKm - Distance in kilometers\n * @returns Formatted distance with unit\n *\n * @example\n * formatDistance(0.5) // => \"500 m\"\n * formatDistance(15.3) // => \"15,3 km\"\n */\nexport function formatDistance(distanceKm: number): string {\n  if (distanceKm < 1) {\n    return `${Math.round(distanceKm * 1000)} m`;\n  }\n  return `${distanceKm.toLocaleString('fr-FR')} km`;\n}\n\n/**\n * Extract latitude/longitude coordinates from a GeoJSON point\n *\n * @param location - GeoJSON Point\n * @returns Object { latitude, longitude }\n */\nexport function extractCoordinates(location: GeoJSONPoint): {\n  latitude: number;\n  longitude: number;\n} {\n  const [longitude, latitude] = location.coordinates;\n  return { latitude, longitude };\n}\n\n/**\n * Create a GeoJSON point from coordinates\n *\n * @param latitude - Latitude\n * @param longitude - Longitude\n * @returns GeoJSON Point\n */\nexport function createGeoJSONPoint(\n  latitude: number,\n  longitude: number\n): GeoJSONPoint {\n  return {\n    type: 'Point',\n    coordinates: [longitude, latitude],\n  };\n}\n\n/**\n * Validate an email address\n *\n * @param email - Email to validate\n * @returns true if valid\n */\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Validate a French phone number\n *\n * @param phone - Phone number to validate\n * @returns true if valid\n */\nexport function isValidFrenchPhone(phone: string): boolean {\n  const phoneRegex = /^(?:(?:\\+|00)33|0)\\s*[1-9](?:[\\s.-]*\\d{2}){4}$/;\n  return phoneRegex.test(phone);\n}\n\n/**\n * Format a French phone number\n *\n * @param phone - Raw phone number\n * @returns Formatted phone number\n *\n * @example\n * formatPhoneNumber('0123456789') // => \"01 23 45 67 89\"\n */\nexport function formatPhoneNumber(phone: string): string {\n  const cleaned = phone.replace(/\\D/g, '');\n\n  if (cleaned.startsWith('33')) {\n    const withoutPrefix = cleaned.substring(2);\n    return `+33 ${withoutPrefix.match(/.{1,2}/g)?.join(' ')}`;\n  }\n\n  if (cleaned.length === 10) {\n    return cleaned.match(/.{1,2}/g)?.join(' ') || phone;\n  }\n\n  return phone;\n}\n\n/**\n * Truncate text to a given length\n *\n * @param text - Text to truncate\n * @param maxLength - Maximum length\n * @returns Truncated text with \"...\"\n *\n * @example\n * truncate('Un très long texte...', 10) // => \"Un très lo...\"\n */\nexport function truncate(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n}\n\n/**\n * Generate a hexadecimal color from a string\n * Useful for generating consistent colors for users, etc.\n *\n * @param str - Input string\n * @returns Hexadecimal color\n *\n * @example\n * stringToColor('user-123') // => \"#a3c2f1\"\n */\nexport function stringToColor(str: string): string {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n  for (let i = 0; i < 3; i++) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += ('00' + value.toString(16)).slice(-2);\n  }\n\n  return color;\n}\n\n/**\n * Debounce a function (delays execution until calls stop)\n *\n * @param func - Function to debounce\n * @param wait - Delay in milliseconds\n * @returns Debounced function\n *\n * @example\n * const debouncedSearch = debounce((query) => search(query), 300)\n */\nexport function debounce<T extends (...args: unknown[]) => unknown>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n\n  return function executedFunction(...args: Parameters<T>) {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Throttle a function (limits number of calls per period)\n *\n * @param func - Function to throttle\n * @param limit - Minimum delay between two calls in milliseconds\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: unknown[]) => unknown>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n\n  return function executedFunction(...args: Parameters<T>) {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Filter initiatives by distance from a point\n *\n * @param initiatives - List of initiatives\n * @param center - Center point [longitude, latitude]\n * @param maxDistanceKm - Maximum distance in km\n * @returns Filtered initiatives with their distance\n */\nexport function filterByDistance(\n  initiatives: Initiative[],\n  center: [number, number],\n  maxDistanceKm: number\n): Array<Initiative & { distance: number }> {\n  return initiatives\n    .map((initiative) => ({\n      ...initiative,\n      distance: calculateDistance(center, initiative.location.coordinates),\n    }))\n    .filter((initiative) => initiative.distance <= maxDistanceKm)\n    .sort((a, b) => a.distance - b.distance);\n}\n\n/**\n * Group initiatives by type\n *\n * @param initiatives - List of initiatives\n * @returns Map with type as key and initiatives as value\n */\nexport function groupByType(\n  initiatives: Initiative[]\n): Map<string, Initiative[]> {\n  return initiatives.reduce((acc, initiative) => {\n    const type = initiative.type;\n    if (!acc.has(type)) {\n      acc.set(type, []);\n    }\n    acc.get(type)?.push(initiative);\n    return acc;\n  }, new Map<string, Initiative[]>());\n}\n\n/**\n * Copy text to clipboard\n *\n * @param text - Text to copy\n * @returns Promise<boolean> - true if successful\n */\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (err) {\n    console.error('Error copying to clipboard:', err);\n    return false;\n  }\n}\n\n/**\n * Generate a share URL for an initiative\n *\n * @param initiativeId - Initiative ID\n * @returns Complete URL\n */\nexport function generateShareUrl(initiativeId: string): string {\n  if (typeof window === 'undefined') return '';\n  return `${window.location.origin}/initiatives/${initiativeId}`;\n}\n\n/**\n * Parse a URL search parameter\n *\n * @param searchParams - URLSearchParams\n * @param key - Parameter key\n * @param defaultValue - Default value\n * @returns Parameter value or default value\n */\nexport function getSearchParam(\n  searchParams: URLSearchParams,\n  key: string,\n  defaultValue: string = ''\n): string {\n  return searchParams.get(key) || defaultValue;\n}\n\n/**\n * Generate an SEO description for an initiative\n *\n * @param initiative - Initiative\n * @returns SEO-optimized description\n */\nexport function generateSEODescription(initiative: Initiative): string {\n  const { name, type, address, description } = initiative;\n\n  let seoDescription = `${name} - ${type}`;\n\n  if (address) {\n    seoDescription += ` situé à ${address}`;\n  }\n\n  if (description) {\n    seoDescription += `. ${truncate(description, 100)}`;\n  }\n\n  return seoDescription;\n}\n\n/**\n * Check if browser supports geolocation\n *\n * @returns true if supported\n */\nexport function supportsGeolocation(): boolean {\n  return typeof navigator !== 'undefined' && 'geolocation' in navigator;\n}\n\n/**\n * Get user's geographic position\n *\n * @returns Promise<{ latitude: number; longitude: number }>\n */\nexport function getCurrentPosition(): Promise<{\n  latitude: number;\n  longitude: number;\n}> {\n  return new Promise((resolve, reject) => {\n    if (!supportsGeolocation()) {\n      reject(new Error('Geolocation not supported'));\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        resolve({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        });\n      },\n      (error) => {\n        reject(error);\n      },\n      {\n        enableHighAccuracy: false,\n        timeout: 5000,\n        maximumAge: 0,\n      }\n    );\n  });\n}\n"],"names":["calculateDistance","cn","copyToClipboard","createGeoJSONPoint","debounce","extractCoordinates","filterByDistance","formatDate","formatDistance","formatPhoneNumber","generateSEODescription","generateShareUrl","getCurrentPosition","getSearchParam","groupByType","isValidEmail","isValidFrenchPhone","stringToColor","supportsGeolocation","throttle","truncate","inputs","twMerge","clsx","date","format","dateObj","Date","Intl","DateTimeFormat","day","month","year","now","diffInMs","getTime","diffInDays","Math","floor","point1","point2","lon1","lat1","lon2","lat2","R","dLat","toRad","dLon","a","sin","cos","c","atan2","sqrt","distance","round","degrees","PI","distanceKm","toLocaleString","location","longitude","latitude","coordinates","type","email","emailRegex","test","phone","phoneRegex","cleaned","replace","startsWith","withoutPrefix","substring","match","join","length","text","maxLength","str","hash","i","charCodeAt","color","value","toString","slice","func","wait","timeout","executedFunction","args","later","clearTimeout","setTimeout","limit","inThrottle","initiatives","center","maxDistanceKm","map","initiative","filter","sort","b","reduce","acc","has","set","get","push","Map","navigator","clipboard","writeText","err","console","error","initiativeId","window","origin","searchParams","key","defaultValue","name","address","description","seoDescription","Promise","resolve","reject","Error","geolocation","position","coords","enableHighAccuracy","maximumAge"],"mappings":"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"}