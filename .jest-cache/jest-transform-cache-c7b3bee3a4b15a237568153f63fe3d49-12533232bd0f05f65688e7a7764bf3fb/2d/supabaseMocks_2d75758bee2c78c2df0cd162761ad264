47bc5e9e797c6ceff8e266e8378a1e54
/**
 * Mock setup for Supabase modules
 * This file provides a centralized mock configuration for all Supabase imports
 */ // Mock Supabase browser client
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get createMockBrowserClient () {
        return createMockBrowserClient;
    },
    get createMockServerClient () {
        return createMockServerClient;
    },
    get mockSupabaseBrowserClient () {
        return mockSupabaseBrowserClient;
    },
    get mockSupabaseServerClient () {
        return mockSupabaseServerClient;
    }
});
const mockSupabaseBrowserClient = {
    auth: {
        getUser: jest.fn(()=>Promise.resolve({
                data: {
                    user: {
                        id: 'test-user-id',
                        email: 'test@example.com'
                    }
                },
                error: null
            })),
        getSession: jest.fn(()=>Promise.resolve({
                data: {
                    session: {
                        user: {
                            id: 'test-user-id',
                            email: 'test@example.com'
                        },
                        access_token: 'test-token'
                    }
                },
                error: null
            })),
        signInWithPassword: jest.fn(),
        signUp: jest.fn(),
        signOut: jest.fn(),
        onAuthStateChange: jest.fn(()=>({
                data: {
                    subscription: {
                        unsubscribe: jest.fn()
                    }
                }
            }))
    },
    from: jest.fn(()=>mockSupabaseBrowserClient),
    select: jest.fn(()=>mockSupabaseBrowserClient),
    insert: jest.fn(()=>mockSupabaseBrowserClient),
    update: jest.fn(()=>mockSupabaseBrowserClient),
    delete: jest.fn(()=>mockSupabaseBrowserClient),
    eq: jest.fn(()=>mockSupabaseBrowserClient),
    single: jest.fn(()=>Promise.resolve({
            data: null,
            error: null
        }))
};
const mockSupabaseServerClient = {
    auth: {
        getUser: jest.fn(()=>Promise.resolve({
                data: {
                    user: {
                        id: 'test-user-id',
                        email: 'test@example.com'
                    }
                },
                error: null
            })),
        getSession: jest.fn(()=>Promise.resolve({
                data: {
                    session: {
                        user: {
                            id: 'test-user-id',
                            email: 'test@example.com'
                        },
                        access_token: 'test-token'
                    }
                },
                error: null
            }))
    },
    from: jest.fn(()=>mockSupabaseServerClient),
    select: jest.fn(()=>mockSupabaseServerClient),
    insert: jest.fn(()=>mockSupabaseServerClient),
    update: jest.fn(()=>mockSupabaseServerClient),
    delete: jest.fn(()=>mockSupabaseServerClient),
    eq: jest.fn(()=>mockSupabaseServerClient),
    single: jest.fn(()=>Promise.resolve({
            data: null,
            error: null
        }))
};
const createMockBrowserClient = ()=>mockSupabaseBrowserClient;
const createMockServerClient = ()=>Promise.resolve(mockSupabaseServerClient);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9SYXBoYWVsL0RvY3VtZW50cy9ERVYubm9zeW5jL2xhbWFwL3NyYy9fX3Rlc3RzX18vc2V0dXAvc3VwYWJhc2VNb2Nrcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vY2sgc2V0dXAgZm9yIFN1cGFiYXNlIG1vZHVsZXNcbiAqIFRoaXMgZmlsZSBwcm92aWRlcyBhIGNlbnRyYWxpemVkIG1vY2sgY29uZmlndXJhdGlvbiBmb3IgYWxsIFN1cGFiYXNlIGltcG9ydHNcbiAqL1xuXG4vLyBNb2NrIFN1cGFiYXNlIGJyb3dzZXIgY2xpZW50XG5leHBvcnQgY29uc3QgbW9ja1N1cGFiYXNlQnJvd3NlckNsaWVudDogYW55ID0ge1xuICBhdXRoOiB7XG4gICAgZ2V0VXNlcjogamVzdC5mbigoKSA9PlxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgZGF0YTogeyB1c2VyOiB7IGlkOiAndGVzdC11c2VyLWlkJywgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyB9IH0sXG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgfSlcbiAgICApLFxuICAgIGdldFNlc3Npb246IGplc3QuZm4oKCkgPT5cbiAgICAgIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBzZXNzaW9uOiB7XG4gICAgICAgICAgICB1c2VyOiB7IGlkOiAndGVzdC11c2VyLWlkJywgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyB9LFxuICAgICAgICAgICAgYWNjZXNzX3Rva2VuOiAndGVzdC10b2tlbicsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICB9KVxuICAgICksXG4gICAgc2lnbkluV2l0aFBhc3N3b3JkOiBqZXN0LmZuKCksXG4gICAgc2lnblVwOiBqZXN0LmZuKCksXG4gICAgc2lnbk91dDogamVzdC5mbigpLFxuICAgIG9uQXV0aFN0YXRlQ2hhbmdlOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICBkYXRhOiB7IHN1YnNjcmlwdGlvbjogeyB1bnN1YnNjcmliZTogamVzdC5mbigpIH0gfSxcbiAgICB9KSksXG4gIH0sXG4gIGZyb206IGplc3QuZm4oKCkgPT4gbW9ja1N1cGFiYXNlQnJvd3NlckNsaWVudCksXG4gIHNlbGVjdDogamVzdC5mbigoKSA9PiBtb2NrU3VwYWJhc2VCcm93c2VyQ2xpZW50KSxcbiAgaW5zZXJ0OiBqZXN0LmZuKCgpID0+IG1vY2tTdXBhYmFzZUJyb3dzZXJDbGllbnQpLFxuICB1cGRhdGU6IGplc3QuZm4oKCkgPT4gbW9ja1N1cGFiYXNlQnJvd3NlckNsaWVudCksXG4gIGRlbGV0ZTogamVzdC5mbigoKSA9PiBtb2NrU3VwYWJhc2VCcm93c2VyQ2xpZW50KSxcbiAgZXE6IGplc3QuZm4oKCkgPT4gbW9ja1N1cGFiYXNlQnJvd3NlckNsaWVudCksXG4gIHNpbmdsZTogamVzdC5mbigoKSA9PlxuICAgIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgZXJyb3I6IG51bGwsXG4gICAgfSlcbiAgKSxcbiAgLy8gQWRkIG1vcmUgbWV0aG9kcyBhcyBuZWVkZWRcbn07XG5cbi8vIE1vY2sgU3VwYWJhc2Ugc2VydmVyIGNsaWVudFxuZXhwb3J0IGNvbnN0IG1vY2tTdXBhYmFzZVNlcnZlckNsaWVudDogYW55ID0ge1xuICBhdXRoOiB7XG4gICAgZ2V0VXNlcjogamVzdC5mbigoKSA9PlxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgZGF0YTogeyB1c2VyOiB7IGlkOiAndGVzdC11c2VyLWlkJywgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyB9IH0sXG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgfSlcbiAgICApLFxuICAgIGdldFNlc3Npb246IGplc3QuZm4oKCkgPT5cbiAgICAgIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBzZXNzaW9uOiB7XG4gICAgICAgICAgICB1c2VyOiB7IGlkOiAndGVzdC11c2VyLWlkJywgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyB9LFxuICAgICAgICAgICAgYWNjZXNzX3Rva2VuOiAndGVzdC10b2tlbicsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICB9KVxuICAgICksXG4gIH0sXG4gIGZyb206IGplc3QuZm4oKCkgPT4gbW9ja1N1cGFiYXNlU2VydmVyQ2xpZW50KSxcbiAgc2VsZWN0OiBqZXN0LmZuKCgpID0+IG1vY2tTdXBhYmFzZVNlcnZlckNsaWVudCksXG4gIGluc2VydDogamVzdC5mbigoKSA9PiBtb2NrU3VwYWJhc2VTZXJ2ZXJDbGllbnQpLFxuICB1cGRhdGU6IGplc3QuZm4oKCkgPT4gbW9ja1N1cGFiYXNlU2VydmVyQ2xpZW50KSxcbiAgZGVsZXRlOiBqZXN0LmZuKCgpID0+IG1vY2tTdXBhYmFzZVNlcnZlckNsaWVudCksXG4gIGVxOiBqZXN0LmZuKCgpID0+IG1vY2tTdXBhYmFzZVNlcnZlckNsaWVudCksXG4gIHNpbmdsZTogamVzdC5mbigoKSA9PlxuICAgIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgZXJyb3I6IG51bGwsXG4gICAgfSlcbiAgKSxcbiAgLy8gQWRkIG1vcmUgbWV0aG9kcyBhcyBuZWVkZWRcbn07XG5cbi8vIEV4cG9ydCBmYWN0b3J5IGZ1bmN0aW9uc1xuZXhwb3J0IGNvbnN0IGNyZWF0ZU1vY2tCcm93c2VyQ2xpZW50ID0gKCkgPT4gbW9ja1N1cGFiYXNlQnJvd3NlckNsaWVudDtcbmV4cG9ydCBjb25zdCBjcmVhdGVNb2NrU2VydmVyQ2xpZW50ID0gKCkgPT5cbiAgUHJvbWlzZS5yZXNvbHZlKG1vY2tTdXBhYmFzZVNlcnZlckNsaWVudCk7XG4iXSwibmFtZXMiOlsiY3JlYXRlTW9ja0Jyb3dzZXJDbGllbnQiLCJjcmVhdGVNb2NrU2VydmVyQ2xpZW50IiwibW9ja1N1cGFiYXNlQnJvd3NlckNsaWVudCIsIm1vY2tTdXBhYmFzZVNlcnZlckNsaWVudCIsImF1dGgiLCJnZXRVc2VyIiwiamVzdCIsImZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJkYXRhIiwidXNlciIsImlkIiwiZW1haWwiLCJlcnJvciIsImdldFNlc3Npb24iLCJzZXNzaW9uIiwiYWNjZXNzX3Rva2VuIiwic2lnbkluV2l0aFBhc3N3b3JkIiwic2lnblVwIiwic2lnbk91dCIsIm9uQXV0aFN0YXRlQ2hhbmdlIiwic3Vic2NyaXB0aW9uIiwidW5zdWJzY3JpYmUiLCJmcm9tIiwic2VsZWN0IiwiaW5zZXJ0IiwidXBkYXRlIiwiZGVsZXRlIiwiZXEiLCJzaW5nbGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Q0FHQyxHQUVELCtCQUErQjs7Ozs7Ozs7Ozs7O1FBK0VsQkE7ZUFBQUE7O1FBQ0FDO2VBQUFBOztRQS9FQUM7ZUFBQUE7O1FBMENBQztlQUFBQTs7O0FBMUNOLE1BQU1ELDRCQUFpQztJQUM1Q0UsTUFBTTtRQUNKQyxTQUFTQyxLQUFLQyxFQUFFLENBQUMsSUFDZkMsUUFBUUMsT0FBTyxDQUFDO2dCQUNkQyxNQUFNO29CQUFFQyxNQUFNO3dCQUFFQyxJQUFJO3dCQUFnQkMsT0FBTztvQkFBbUI7Z0JBQUU7Z0JBQ2hFQyxPQUFPO1lBQ1Q7UUFFRkMsWUFBWVQsS0FBS0MsRUFBRSxDQUFDLElBQ2xCQyxRQUFRQyxPQUFPLENBQUM7Z0JBQ2RDLE1BQU07b0JBQ0pNLFNBQVM7d0JBQ1BMLE1BQU07NEJBQUVDLElBQUk7NEJBQWdCQyxPQUFPO3dCQUFtQjt3QkFDdERJLGNBQWM7b0JBQ2hCO2dCQUNGO2dCQUNBSCxPQUFPO1lBQ1Q7UUFFRkksb0JBQW9CWixLQUFLQyxFQUFFO1FBQzNCWSxRQUFRYixLQUFLQyxFQUFFO1FBQ2ZhLFNBQVNkLEtBQUtDLEVBQUU7UUFDaEJjLG1CQUFtQmYsS0FBS0MsRUFBRSxDQUFDLElBQU8sQ0FBQTtnQkFDaENHLE1BQU07b0JBQUVZLGNBQWM7d0JBQUVDLGFBQWFqQixLQUFLQyxFQUFFO29CQUFHO2dCQUFFO1lBQ25ELENBQUE7SUFDRjtJQUNBaUIsTUFBTWxCLEtBQUtDLEVBQUUsQ0FBQyxJQUFNTDtJQUNwQnVCLFFBQVFuQixLQUFLQyxFQUFFLENBQUMsSUFBTUw7SUFDdEJ3QixRQUFRcEIsS0FBS0MsRUFBRSxDQUFDLElBQU1MO0lBQ3RCeUIsUUFBUXJCLEtBQUtDLEVBQUUsQ0FBQyxJQUFNTDtJQUN0QjBCLFFBQVF0QixLQUFLQyxFQUFFLENBQUMsSUFBTUw7SUFDdEIyQixJQUFJdkIsS0FBS0MsRUFBRSxDQUFDLElBQU1MO0lBQ2xCNEIsUUFBUXhCLEtBQUtDLEVBQUUsQ0FBQyxJQUNkQyxRQUFRQyxPQUFPLENBQUM7WUFDZEMsTUFBTTtZQUNOSSxPQUFPO1FBQ1Q7QUFHSjtBQUdPLE1BQU1YLDJCQUFnQztJQUMzQ0MsTUFBTTtRQUNKQyxTQUFTQyxLQUFLQyxFQUFFLENBQUMsSUFDZkMsUUFBUUMsT0FBTyxDQUFDO2dCQUNkQyxNQUFNO29CQUFFQyxNQUFNO3dCQUFFQyxJQUFJO3dCQUFnQkMsT0FBTztvQkFBbUI7Z0JBQUU7Z0JBQ2hFQyxPQUFPO1lBQ1Q7UUFFRkMsWUFBWVQsS0FBS0MsRUFBRSxDQUFDLElBQ2xCQyxRQUFRQyxPQUFPLENBQUM7Z0JBQ2RDLE1BQU07b0JBQ0pNLFNBQVM7d0JBQ1BMLE1BQU07NEJBQUVDLElBQUk7NEJBQWdCQyxPQUFPO3dCQUFtQjt3QkFDdERJLGNBQWM7b0JBQ2hCO2dCQUNGO2dCQUNBSCxPQUFPO1lBQ1Q7SUFFSjtJQUNBVSxNQUFNbEIsS0FBS0MsRUFBRSxDQUFDLElBQU1KO0lBQ3BCc0IsUUFBUW5CLEtBQUtDLEVBQUUsQ0FBQyxJQUFNSjtJQUN0QnVCLFFBQVFwQixLQUFLQyxFQUFFLENBQUMsSUFBTUo7SUFDdEJ3QixRQUFRckIsS0FBS0MsRUFBRSxDQUFDLElBQU1KO0lBQ3RCeUIsUUFBUXRCLEtBQUtDLEVBQUUsQ0FBQyxJQUFNSjtJQUN0QjBCLElBQUl2QixLQUFLQyxFQUFFLENBQUMsSUFBTUo7SUFDbEIyQixRQUFReEIsS0FBS0MsRUFBRSxDQUFDLElBQ2RDLFFBQVFDLE9BQU8sQ0FBQztZQUNkQyxNQUFNO1lBQ05JLE9BQU87UUFDVDtBQUdKO0FBR08sTUFBTWQsMEJBQTBCLElBQU1FO0FBQ3RDLE1BQU1ELHlCQUF5QixJQUNwQ08sUUFBUUMsT0FBTyxDQUFDTiJ9