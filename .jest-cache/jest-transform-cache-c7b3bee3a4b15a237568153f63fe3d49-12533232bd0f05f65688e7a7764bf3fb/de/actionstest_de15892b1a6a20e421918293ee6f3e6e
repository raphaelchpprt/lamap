b31b27b441d1ebc2812cdcbcb6919a82
/**
 * Tests for Server Actions
 *
 * These tests verify the CRUD operations for initiatives,
 * including validation, authentication, and authorization.
 */ "use strict";
// Mock dependencies
jest.mock('next/cache');
jest.mock('@/lib/supabase/server');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _cache = require("next/cache");
const _actions = require("../../app/actions");
const _server = require("../../lib/supabase/server");
const mockCreateClient = _server.createClient;
const mockRevalidatePath = _cache.revalidatePath;
describe('Server Actions', ()=>{
    // Mock Supabase client
    let mockSupabase;
    beforeEach(()=>{
        // Reset mocks
        jest.clearAllMocks();
        // Setup mock Supabase client with chainable methods
        const mockEq = jest.fn().mockReturnThis();
        mockSupabase = {
            auth: {
                getUser: jest.fn()
            },
            from: jest.fn().mockReturnThis(),
            insert: jest.fn().mockReturnThis(),
            update: jest.fn(()=>({
                    eq: jest.fn().mockResolvedValue({
                        error: null
                    })
                })),
            delete: jest.fn(()=>({
                    eq: jest.fn().mockResolvedValue({
                        error: null
                    })
                })),
            select: jest.fn().mockReturnThis(),
            eq: mockEq,
            single: jest.fn()
        };
        mockCreateClient.mockResolvedValue(mockSupabase);
    });
    describe('createInitiative', ()=>{
        const validData = {
            name: 'Test Initiative',
            type: 'AMAP',
            description: 'A test initiative',
            address: '123 Test Street',
            latitude: 48.8566,
            longitude: 2.3522,
            website: 'https://test.com',
            phone: '0123456789',
            email: 'test@test.com'
        };
        it('should create an initiative successfully', async ()=>{
            // Mock authenticated user
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'user123'
                    }
                },
                error: null
            });
            // Mock successful insert
            mockSupabase.single.mockResolvedValue({
                data: {
                    id: 'initiative123'
                },
                error: null
            });
            const result = await (0, _actions.createInitiative)(validData);
            expect(result.success).toBe(true);
            expect(result.data?.id).toBe('initiative123');
            expect(mockRevalidatePath).toHaveBeenCalledWith('/');
        });
        it('should fail if user is not authenticated', async ()=>{
            // Mock unauthenticated
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: null
            });
            const result = await (0, _actions.createInitiative)(validData);
            expect(result.success).toBe(false);
            expect(result.error).toContain('connecté');
            expect(mockRevalidatePath).not.toHaveBeenCalled();
        });
        it('should validate name length (minimum 3 characters)', async ()=>{
            const result = await (0, _actions.createInitiative)({
                ...validData,
                name: 'AB'
            });
            expect(result.success).toBe(false);
            expect(result.error).toContain('3 caractères');
        });
        it('should validate latitude bounds (-90 to 90)', async ()=>{
            const result = await (0, _actions.createInitiative)({
                ...validData,
                latitude: 91
            });
            expect(result.success).toBe(false);
            expect(result.error).toContain('Latitude');
        });
        it('should validate longitude bounds (-180 to 180)', async ()=>{
            const result = await (0, _actions.createInitiative)({
                ...validData,
                longitude: 181
            });
            expect(result.success).toBe(false);
            expect(result.error).toContain('Longitude');
        });
        it('should handle database errors gracefully', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'user123'
                    }
                },
                error: null
            });
            mockSupabase.single.mockResolvedValue({
                data: null,
                error: {
                    message: 'Database error'
                }
            });
            const result = await (0, _actions.createInitiative)(validData);
            expect(result.success).toBe(false);
            expect(result.error).toContain('Database error');
        });
    });
    describe('updateInitiative', ()=>{
        const updateData = {
            name: 'Updated Initiative',
            description: 'Updated description'
        };
        it('should update an initiative successfully', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'user123'
                    }
                },
                error: null
            });
            // Mock ownership check
            mockSupabase.single.mockResolvedValueOnce({
                data: {
                    user_id: 'user123'
                },
                error: null
            });
            const result = await (0, _actions.updateInitiative)('initiative123', updateData);
            expect(result.success).toBe(true);
            expect(mockRevalidatePath).toHaveBeenCalledWith('/');
        });
        it('should fail if user is not authenticated', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: null
            });
            const result = await (0, _actions.updateInitiative)('initiative123', updateData);
            expect(result.success).toBe(false);
            expect(result.error).toContain('connecté');
        });
        it('should fail if user does not own the initiative', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'user123'
                    }
                },
                error: null
            });
            // Mock initiative owned by different user
            mockSupabase.single.mockResolvedValue({
                data: {
                    user_id: 'otherUser'
                },
                error: null
            });
            const result = await (0, _actions.updateInitiative)('initiative123', updateData);
            expect(result.success).toBe(false);
            expect(result.error).toContain('autorisé');
        });
        it('should validate updated name length', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'user123'
                    }
                },
                error: null
            });
            mockSupabase.single.mockResolvedValue({
                data: {
                    user_id: 'user123'
                },
                error: null
            });
            const result = await (0, _actions.updateInitiative)('initiative123', {
                name: 'AB'
            });
            expect(result.success).toBe(false);
            expect(result.error).toContain('3 caractères');
        });
    });
    describe('deleteInitiative', ()=>{
        it('should delete an initiative successfully', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'user123'
                    }
                },
                error: null
            });
            // Mock ownership check
            mockSupabase.single.mockResolvedValue({
                data: {
                    user_id: 'user123'
                },
                error: null
            });
            const result = await (0, _actions.deleteInitiative)('initiative123');
            expect(result.success).toBe(true);
            expect(mockRevalidatePath).toHaveBeenCalledWith('/');
        });
        it('should fail if user is not authenticated', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: null
            });
            const result = await (0, _actions.deleteInitiative)('initiative123');
            expect(result.success).toBe(false);
            expect(result.error).toContain('connecté');
        });
        it('should fail if user does not own the initiative', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'user123'
                    }
                },
                error: null
            });
            mockSupabase.single.mockResolvedValue({
                data: {
                    user_id: 'otherUser'
                },
                error: null
            });
            const result = await (0, _actions.deleteInitiative)('initiative123');
            expect(result.success).toBe(false);
            expect(result.error).toContain('supprimer');
        });
        it('should fail if initiative does not exist', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'user123'
                    }
                },
                error: null
            });
            mockSupabase.single.mockResolvedValue({
                data: null,
                error: {
                    message: 'Not found'
                }
            });
            const result = await (0, _actions.deleteInitiative)('nonexistent');
            expect(result.success).toBe(false);
            expect(result.error).toContain('trouvée');
        });
    });
    describe('verifyInitiative', ()=>{
        it('should verify an initiative successfully', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'admin123'
                    }
                },
                error: null
            });
            mockSupabase.eq.mockResolvedValue({
                error: null
            });
            const result = await (0, _actions.verifyInitiative)('initiative123', true);
            expect(result.success).toBe(true);
            expect(mockRevalidatePath).toHaveBeenCalledWith('/');
        });
        it('should unverify an initiative successfully', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: {
                        id: 'admin123'
                    }
                },
                error: null
            });
            mockSupabase.eq.mockResolvedValue({
                error: null
            });
            const result = await (0, _actions.verifyInitiative)('initiative123', false);
            expect(result.success).toBe(true);
        });
        it('should fail if user is not authenticated', async ()=>{
            mockSupabase.auth.getUser.mockResolvedValue({
                data: {
                    user: null
                },
                error: null
            });
            const result = await (0, _actions.verifyInitiative)('initiative123', true);
            expect(result.success).toBe(false);
            expect(result.error).toContain('connecté');
        });
    });
    describe('getInitiativeById', ()=>{
        it('should fetch an initiative successfully', async ()=>{
            const mockInitiative = {
                id: 'initiative123',
                name: 'Test Initiative',
                type: 'AMAP',
                description: 'A test',
                address: '123 Test St',
                website: 'https://test.com',
                phone: '0123456789',
                email: 'test@test.com',
                verified: true,
                created_at: '2025-01-01T00:00:00Z'
            };
            mockSupabase.single.mockResolvedValue({
                data: mockInitiative,
                error: null
            });
            const result = await (0, _actions.getInitiativeById)('initiative123');
            expect(result.success).toBe(true);
            expect(result.data?.id).toBe('initiative123');
            expect(result.data?.name).toBe('Test Initiative');
        });
        it('should fail if initiative does not exist', async ()=>{
            mockSupabase.single.mockResolvedValue({
                data: null,
                error: {
                    message: 'Not found'
                }
            });
            const result = await (0, _actions.getInitiativeById)('nonexistent');
            expect(result.success).toBe(false);
            expect(result.error).toContain('trouvée');
        });
        it('should validate ID format', async ()=>{
            const result = await (0, _actions.getInitiativeById)('');
            expect(result.success).toBe(false);
            expect(result.error).toContain('valide');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,