{"version":3,"sources":["/Users/Raphael/Documents/DEV.nosync/lamap/src/lib/supabase/server.ts"],"sourcesContent":["/**\n * Supabase client for server (Server Components and API Routes)\n *\n * This client is used in Next.js Server Components and API Routes.\n * It manages cookies to maintain authentication state on the server side.\n */\n\nimport { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\n\nimport type { Database } from './types';\n\n/**\n * Create Supabase client for Server Components\n *\n * Uses Next.js cookies to manage server-side authentication.\n * This function must be called in an async context.\n *\n * @returns Supabase client configured for server\n */\nexport async function createClient() {\n  // Check environment variables\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\n  if (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error(\n      'Missing Supabase environment variables. ' +\n        'Check NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY in .env.local'\n    );\n  }\n\n  // Get Next.js cookie store\n  const cookieStore = await cookies();\n\n  return createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n    cookies: {\n      // Get all cookies\n      getAll() {\n        return cookieStore.getAll();\n      },\n      // Set multiple cookies at once\n      setAll(cookiesToSet) {\n        try {\n          cookiesToSet.forEach(({ name, value, options }) => {\n            cookieStore.set(name, value, options);\n          });\n        } catch (error) {\n          // Cookie errors can be ignored in some contexts\n          // (e.g., during server-side rendering)\n          console.warn('Unable to set cookies:', error);\n        }\n      },\n    },\n  });\n}\n\n/**\n * Create Supabase client for API Routes\n *\n * Specialized version for API Routes that need finer control\n * over cookies.\n *\n * @param request - API Route Request object\n * @param response - API Route Response object\n * @returns Supabase client configured for API Routes\n */\nexport function createClientForApiRoute(request: Request, response?: Response) {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\n  if (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error(\n      'Missing Supabase environment variables. ' +\n        'Check NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY in .env.local'\n    );\n  }\n\n  return createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n    cookies: {\n      getAll() {\n        // Get cookies from request\n        const cookieHeader = request.headers.get('cookie');\n        if (!cookieHeader) return [];\n\n        return cookieHeader\n          .split(';')\n          .map((cookie) => {\n            const [name, ...rest] = cookie.trim().split('=');\n            return {\n              name: name?.trim() || '',\n              value: rest.join('=') || '',\n            };\n          })\n          .filter((cookie) => cookie.name && cookie.value);\n      },\n      setAll(cookiesToSet) {\n        // Set cookies in response if available\n        if (response) {\n          cookiesToSet.forEach(({ name, value, options }) => {\n            response.headers.append(\n              'Set-Cookie',\n              `${name}=${value}; ${Object.entries(options || {})\n                .map(([key, val]) => `${key}=${val}`)\n                .join('; ')}`\n            );\n          });\n        }\n      },\n    },\n  });\n}\n"],"names":["createClient","createClientForApiRoute","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseAnonKey","NEXT_PUBLIC_SUPABASE_ANON_KEY","Error","cookieStore","cookies","createServerClient","getAll","setAll","cookiesToSet","forEach","name","value","options","set","error","console","warn","request","response","cookieHeader","headers","get","split","map","cookie","rest","trim","join","filter","append","Object","entries","key","val"],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;QAeqBA;eAAAA;;QA+CNC;eAAAA;;;qBA5DmB;yBACX;AAYjB,eAAeD;IACpB,8BAA8B;IAC9B,MAAME,cAAcC,QAAQC,GAAG,CAACC,wBAAwB;IACxD,MAAMC,kBAAkBH,QAAQC,GAAG,CAACG,6BAA6B;IAEjE,IAAI,CAACL,eAAe,CAACI,iBAAiB;QACpC,MAAM,IAAIE,MACR,6CACE;IAEN;IAEA,2BAA2B;IAC3B,MAAMC,cAAc,MAAMC,IAAAA,gBAAO;IAEjC,OAAOC,IAAAA,uBAAkB,EAAWT,aAAaI,iBAAiB;QAChEI,SAAS;YACP,kBAAkB;YAClBE;gBACE,OAAOH,YAAYG,MAAM;YAC3B;YACA,+BAA+B;YAC/BC,QAAOC,YAAY;gBACjB,IAAI;oBACFA,aAAaC,OAAO,CAAC,CAAC,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,EAAE;wBAC5CT,YAAYU,GAAG,CAACH,MAAMC,OAAOC;oBAC/B;gBACF,EAAE,OAAOE,OAAO;oBACd,gDAAgD;oBAChD,uCAAuC;oBACvCC,QAAQC,IAAI,CAAC,0BAA0BF;gBACzC;YACF;QACF;IACF;AACF;AAYO,SAASnB,wBAAwBsB,OAAgB,EAAEC,QAAmB;IAC3E,MAAMtB,cAAcC,QAAQC,GAAG,CAACC,wBAAwB;IACxD,MAAMC,kBAAkBH,QAAQC,GAAG,CAACG,6BAA6B;IAEjE,IAAI,CAACL,eAAe,CAACI,iBAAiB;QACpC,MAAM,IAAIE,MACR,6CACE;IAEN;IAEA,OAAOG,IAAAA,uBAAkB,EAAWT,aAAaI,iBAAiB;QAChEI,SAAS;YACPE;gBACE,2BAA2B;gBAC3B,MAAMa,eAAeF,QAAQG,OAAO,CAACC,GAAG,CAAC;gBACzC,IAAI,CAACF,cAAc,OAAO,EAAE;gBAE5B,OAAOA,aACJG,KAAK,CAAC,KACNC,GAAG,CAAC,CAACC;oBACJ,MAAM,CAACd,MAAM,GAAGe,KAAK,GAAGD,OAAOE,IAAI,GAAGJ,KAAK,CAAC;oBAC5C,OAAO;wBACLZ,MAAMA,MAAMgB,UAAU;wBACtBf,OAAOc,KAAKE,IAAI,CAAC,QAAQ;oBAC3B;gBACF,GACCC,MAAM,CAAC,CAACJ,SAAWA,OAAOd,IAAI,IAAIc,OAAOb,KAAK;YACnD;YACAJ,QAAOC,YAAY;gBACjB,uCAAuC;gBACvC,IAAIU,UAAU;oBACZV,aAAaC,OAAO,CAAC,CAAC,EAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,EAAE;wBAC5CM,SAASE,OAAO,CAACS,MAAM,CACrB,cACA,GAAGnB,KAAK,CAAC,EAAEC,MAAM,EAAE,EAAEmB,OAAOC,OAAO,CAACnB,WAAW,CAAC,GAC7CW,GAAG,CAAC,CAAC,CAACS,KAAKC,IAAI,GAAK,GAAGD,IAAI,CAAC,EAAEC,KAAK,EACnCN,IAAI,CAAC,OAAO;oBAEnB;gBACF;YACF;QACF;IACF;AACF"}