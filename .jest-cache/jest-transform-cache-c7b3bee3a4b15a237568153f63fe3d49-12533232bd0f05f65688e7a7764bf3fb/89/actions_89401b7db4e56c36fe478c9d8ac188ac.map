{"version":3,"sources":["/Users/Raphael/Documents/DEV.nosync/lamap/src/app/actions.ts"],"sourcesContent":["// @ts-nocheck - Supabase types need to be generated. Run: npx supabase gen types typescript\n'use server';\n\nimport { revalidatePath } from 'next/cache';\n\nimport { createClient } from '@/lib/supabase/server';\n\nimport type { InitiativeType } from '@/types/initiative';\n\n// ================================\n// TYPES\n// ================================\n\ninterface CreateInitiativeData {\n  name: string;\n  type: InitiativeType;\n  description?: string;\n  address?: string;\n  latitude: number;\n  longitude: number;\n  website?: string;\n  phone?: string;\n  email?: string;\n}\n\ninterface UpdateInitiativeData {\n  name?: string;\n  type?: InitiativeType;\n  description?: string;\n  address?: string;\n  latitude?: number;\n  longitude?: number;\n  website?: string;\n  phone?: string;\n  email?: string;\n  verified?: boolean;\n}\n\ninterface ActionResponse<T = void> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\n// ================================\n// CREATE INITIATIVE\n// ================================\n\nexport async function createInitiative(\n  data: CreateInitiativeData\n): Promise<ActionResponse<{ id: string }>> {\n  try {\n    // Validation\n    if (!data.name || data.name.trim().length < 3) {\n      return {\n        success: false,\n        error: 'Le nom doit contenir au moins 3 caractères',\n      };\n    }\n\n    if (!data.type) {\n      return {\n        success: false,\n        error: 'Le type est obligatoire',\n      };\n    }\n\n    if (isNaN(data.latitude) || isNaN(data.longitude)) {\n      return {\n        success: false,\n        error: 'Les coordonnées GPS sont invalides',\n      };\n    }\n\n    if (\n      data.latitude < -90 ||\n      data.latitude > 90 ||\n      data.longitude < -180 ||\n      data.longitude > 180\n    ) {\n      return {\n        success: false,\n        error: 'Les coordonnées GPS sont hors limites',\n      };\n    }\n\n    // Get authenticated user\n    const supabase = await createClient();\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser();\n\n    if (authError || !user) {\n      return {\n        success: false,\n        error: 'Vous devez être connecté pour ajouter une initiative',\n      };\n    }\n\n    // Create initiative with PostGIS POINT\n    const { data: initiative, error: insertError } = (await supabase\n      .from('initiatives')\n      .insert({\n        name: data.name.trim(),\n        type: data.type,\n        description: data.description?.trim() || null,\n        address: data.address?.trim() || null,\n        location: `POINT(${data.longitude} ${data.latitude})`,\n        website: data.website?.trim() || null,\n        phone: data.phone?.trim() || null,\n        email: data.email?.trim() || null,\n        user_id: user.id,\n        verified: false,\n      })\n      .select('id')\n      .single()) as any;\n\n    if (insertError) {\n      console.error('Supabase insert error:', insertError);\n      return {\n        success: false,\n        error: `Erreur lors de l'ajout: ${insertError.message}`,\n      };\n    }\n\n    // Revalidate the homepage to show the new initiative\n    revalidatePath('/');\n\n    return {\n      success: true,\n      data: { id: initiative.id },\n    };\n  } catch (error) {\n    console.error('Error creating initiative:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Une erreur est survenue',\n    };\n  }\n}\n\n// ================================\n// UPDATE INITIATIVE\n// ================================\n\nexport async function updateInitiative(\n  id: string,\n  data: UpdateInitiativeData\n): Promise<ActionResponse> {\n  try {\n    if (!id) {\n      return {\n        success: false,\n        error: \"L'ID de l'initiative est requis\",\n      };\n    }\n\n    // Get authenticated user\n    const supabase = await createClient();\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser();\n\n    if (authError || !user) {\n      return {\n        success: false,\n        error: 'Vous devez être connecté pour modifier une initiative',\n      };\n    }\n\n    // Check if initiative exists and user owns it\n    const { data: existing, error: fetchError } = (await supabase\n      .from('initiatives')\n      .select('user_id')\n      .eq('id', id)\n      .single()) as any;\n\n    if (fetchError || !existing) {\n      return {\n        success: false,\n        error: 'Initiative non trouvée',\n      };\n    }\n\n    if (existing.user_id !== user.id) {\n      return {\n        success: false,\n        error: \"Vous n'êtes pas autorisé à modifier cette initiative\",\n      };\n    }\n\n    // Prepare update data\n    const updateData: Record<string, unknown> = {};\n\n    if (data.name !== undefined) {\n      if (data.name.trim().length < 3) {\n        return {\n          success: false,\n          error: 'Le nom doit contenir au moins 3 caractères',\n        };\n      }\n      updateData.name = data.name.trim();\n    }\n\n    if (data.type !== undefined) {\n      updateData.type = data.type;\n    }\n\n    if (data.description !== undefined) {\n      updateData.description = data.description?.trim() || null;\n    }\n\n    if (data.address !== undefined) {\n      updateData.address = data.address?.trim() || null;\n    }\n\n    if (data.website !== undefined) {\n      updateData.website = data.website?.trim() || null;\n    }\n\n    if (data.phone !== undefined) {\n      updateData.phone = data.phone?.trim() || null;\n    }\n\n    if (data.email !== undefined) {\n      updateData.email = data.email?.trim() || null;\n    }\n\n    // Update location if both coordinates are provided\n    if (data.latitude !== undefined && data.longitude !== undefined) {\n      if (isNaN(data.latitude) || isNaN(data.longitude)) {\n        return {\n          success: false,\n          error: 'Les coordonnées GPS sont invalides',\n        };\n      }\n\n      if (\n        data.latitude < -90 ||\n        data.latitude > 90 ||\n        data.longitude < -180 ||\n        data.longitude > 180\n      ) {\n        return {\n          success: false,\n          error: 'Les coordonnées GPS sont hors limites',\n        };\n      }\n\n      updateData.location = `POINT(${data.longitude} ${data.latitude})`;\n    }\n\n    // Update initiative\n    const { error: updateError } = (await supabase\n      .from('initiatives')\n      .update(updateData)\n      .eq('id', id)) as any;\n\n    if (updateError) {\n      console.error('Supabase update error:', updateError);\n      return {\n        success: false,\n        error: `Erreur lors de la modification: ${updateError.message}`,\n      };\n    }\n\n    // Revalidate the homepage\n    revalidatePath('/');\n\n    return {\n      success: true,\n    };\n  } catch (error) {\n    console.error('Error updating initiative:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Une erreur est survenue',\n    };\n  }\n}\n\n// ================================\n// DELETE INITIATIVE\n// ================================\n\nexport async function deleteInitiative(id: string): Promise<ActionResponse> {\n  try {\n    if (!id) {\n      return {\n        success: false,\n        error: \"L'ID de l'initiative est requis\",\n      };\n    }\n\n    // Get authenticated user\n    const supabase = await createClient();\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser();\n\n    if (authError || !user) {\n      return {\n        success: false,\n        error: 'Vous devez être connecté pour supprimer une initiative',\n      };\n    }\n\n    // Check if initiative exists and user owns it\n    const { data: existing, error: fetchError } = (await supabase\n      .from('initiatives')\n      .select('user_id')\n      .eq('id', id)\n      .single()) as any;\n\n    if (fetchError || !existing) {\n      return {\n        success: false,\n        error: 'Initiative non trouvée',\n      };\n    }\n\n    if (existing.user_id !== user.id) {\n      return {\n        success: false,\n        error: \"Vous n'êtes pas autorisé à supprimer cette initiative\",\n      };\n    }\n\n    // Delete initiative\n    const { error: deleteError } = (await supabase\n      .from('initiatives')\n      .delete()\n      .eq('id', id)) as any;\n\n    if (deleteError) {\n      console.error('Supabase delete error:', deleteError);\n      return {\n        success: false,\n        error: `Erreur lors de la suppression: ${deleteError.message}`,\n      };\n    }\n\n    // Revalidate the homepage\n    revalidatePath('/');\n\n    return {\n      success: true,\n    };\n  } catch (error) {\n    console.error('Error deleting initiative:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Une erreur est survenue',\n    };\n  }\n}\n\n// ================================\n// VERIFY INITIATIVE (Admin only)\n// ================================\n\nexport async function verifyInitiative(\n  id: string,\n  verified: boolean\n): Promise<ActionResponse> {\n  try {\n    if (!id) {\n      return {\n        success: false,\n        error: \"L'ID de l'initiative est requis\",\n      };\n    }\n\n    // Get authenticated user\n    const supabase = await createClient();\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser();\n\n    if (authError || !user) {\n      return {\n        success: false,\n        error: 'Vous devez être connecté',\n      };\n    }\n\n    // TODO: Add admin role check here\n    // For now, any authenticated user can verify\n    // In production, check user role from profiles table\n\n    // Update verification status\n    const { error: updateError } = (await supabase\n      .from('initiatives')\n      .update({ verified })\n      .eq('id', id)) as any;\n\n    if (updateError) {\n      console.error('Supabase update error:', updateError);\n      return {\n        success: false,\n        error: `Erreur lors de la vérification: ${updateError.message}`,\n      };\n    }\n\n    // Revalidate the homepage\n    revalidatePath('/');\n\n    return {\n      success: true,\n    };\n  } catch (error) {\n    console.error('Error verifying initiative:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Une erreur est survenue',\n    };\n  }\n}\n\n// ================================\n// GET INITIATIVE BY ID\n// ================================\n\nexport async function getInitiativeById(id: string): Promise<\n  ActionResponse<{\n    id: string;\n    name: string;\n    type: InitiativeType;\n    description: string | null;\n    address: string | null;\n    website: string | null;\n    phone: string | null;\n    email: string | null;\n    verified: boolean;\n    created_at: string;\n  }>\n> {\n  try {\n    if (!id) {\n      return {\n        success: false,\n        error: \"L'ID de l'initiative est requis\",\n      };\n    }\n\n    const supabase = await createClient();\n    const { data, error } = (await supabase\n      .from('initiatives')\n      .select('*')\n      .eq('id', id)\n      .single()) as any;\n\n    if (error || !data) {\n      return {\n        success: false,\n        error: 'Initiative non trouvée',\n      };\n    }\n\n    return {\n      success: true,\n      data: {\n        id: data.id,\n        name: data.name,\n        type: data.type,\n        description: data.description,\n        address: data.address,\n        website: data.website,\n        phone: data.phone,\n        email: data.email,\n        verified: data.verified,\n        created_at: data.created_at,\n      },\n    };\n  } catch (error) {\n    console.error('Error fetching initiative:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Une erreur est survenue',\n    };\n  }\n}\n"],"names":["createInitiative","deleteInitiative","getInitiativeById","updateInitiative","verifyInitiative","data","name","trim","length","success","error","type","isNaN","latitude","longitude","supabase","createClient","user","authError","auth","getUser","initiative","insertError","from","insert","description","address","location","website","phone","email","user_id","id","verified","select","single","console","message","revalidatePath","Error","existing","fetchError","eq","updateData","undefined","updateError","update","deleteError","delete","created_at"],"mappings":"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"}