{"version":3,"sources":["/Users/Raphael/Documents/DEV.nosync/lamap/src/__tests__/components/FilterPanel.test.tsx"],"sourcesContent":["import { render, screen, fireEvent } from '@testing-library/react';\n\nimport FilterPanel from '@/components/FilterPanel';\n\nimport type { InitiativeType } from '@/types/initiative';\n\ndescribe('FilterPanel', () => {\n  const mockOnFilterChange = jest.fn();\n  const defaultSelectedTypes: InitiativeType[] = ['Ressourcerie', 'AMAP'];\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('displays all initiative types', () => {\n    render(\n      <FilterPanel\n        selectedTypes={defaultSelectedTypes}\n        onFilterChange={mockOnFilterChange}\n      />\n    );\n\n    expect(screen.getByText('Ressourcerie')).toBeInTheDocument();\n    expect(screen.getByText('Repair Café')).toBeInTheDocument();\n    expect(screen.getByText('AMAP')).toBeInTheDocument();\n    expect(screen.getByText('Épicerie sociale')).toBeInTheDocument();\n    expect(screen.getByText('Fab Lab')).toBeInTheDocument();\n  });\n\n  it('displays selected types as checked', () => {\n    render(\n      <FilterPanel\n        selectedTypes={defaultSelectedTypes}\n        onFilterChange={mockOnFilterChange}\n      />\n    );\n\n    const ressourcerieCheckbox = screen.getByRole('checkbox', {\n      name: /Ressourcerie/,\n    });\n    const amapCheckbox = screen.getByRole('checkbox', { name: /AMAP/ });\n    const repairCafeCheckbox = screen.getByRole('checkbox', {\n      name: /Repair Café/,\n    });\n\n    expect(ressourcerieCheckbox).toBeChecked();\n    expect(amapCheckbox).toBeChecked();\n    expect(repairCafeCheckbox).not.toBeChecked();\n  });\n\n  it('calls onFilterChange when selecting a type', () => {\n    render(\n      <FilterPanel\n        selectedTypes={defaultSelectedTypes}\n        onFilterChange={mockOnFilterChange}\n      />\n    );\n\n    const repairCafeCheckbox = screen.getByRole('checkbox', {\n      name: /Repair Café/,\n    });\n    fireEvent.click(repairCafeCheckbox);\n\n    expect(mockOnFilterChange).toHaveBeenCalledWith([\n      ...defaultSelectedTypes,\n      'Repair Café',\n    ]);\n  });\n\n  it('calls onFilterChange when deselecting a type', () => {\n    render(\n      <FilterPanel\n        selectedTypes={defaultSelectedTypes}\n        onFilterChange={mockOnFilterChange}\n      />\n    );\n\n    const ressourcerieCheckbox = screen.getByRole('checkbox', {\n      name: /Ressourcerie/,\n    });\n    fireEvent.click(ressourcerieCheckbox);\n\n    expect(mockOnFilterChange).toHaveBeenCalledWith(['AMAP']);\n  });\n\n  it('selects all types when clicking \"Select all\"', () => {\n    render(\n      <FilterPanel selectedTypes={[]} onFilterChange={mockOnFilterChange} />\n    );\n\n    const selectAllButton = screen.getByText('Tout sélectionner');\n    fireEvent.click(selectAllButton);\n\n    expect(mockOnFilterChange).toHaveBeenCalledWith(\n      expect.arrayContaining([\n        'Ressourcerie',\n        'Repair Café',\n        'AMAP',\n        \"Entreprise d'insertion\",\n        'Point de collecte',\n        'Recyclerie',\n        'Épicerie sociale',\n        'Jardin partagé',\n        'Fab Lab',\n        'Coopérative',\n        'Monnaie locale',\n        'Tiers-lieu',\n        'Autre',\n      ])\n    );\n  });\n\n  it('deselects all types when clicking \"Deselect all\"', () => {\n    render(\n      <FilterPanel\n        selectedTypes={defaultSelectedTypes}\n        onFilterChange={mockOnFilterChange}\n      />\n    );\n\n    const deselectAllButton = screen.getByText('Tout désélectionner');\n    fireEvent.click(deselectAllButton);\n\n    expect(mockOnFilterChange).toHaveBeenCalledWith([]);\n  });\n\n  it('displays initiative counters when provided', () => {\n    const initiativeCounts = {\n      Ressourcerie: 5,\n      AMAP: 3,\n      'Repair Café': 2,\n    };\n\n    render(\n      <FilterPanel\n        selectedTypes={defaultSelectedTypes}\n        onFilterChange={mockOnFilterChange}\n        initiativeCounts={initiativeCounts}\n      />\n    );\n\n    expect(screen.getByText('5')).toBeInTheDocument();\n    expect(screen.getByText('3')).toBeInTheDocument();\n    expect(screen.getByText('2')).toBeInTheDocument();\n  });\n\n  it('displays total filtered initiatives', () => {\n    const initiativeCounts = {\n      Ressourcerie: 5,\n      AMAP: 3,\n      'Repair Café': 2,\n    };\n\n    render(\n      <FilterPanel\n        selectedTypes={['Ressourcerie', 'AMAP']}\n        onFilterChange={mockOnFilterChange}\n        initiativeCounts={initiativeCounts}\n      />\n    );\n\n    // 5 (Ressourcerie) + 3 (AMAP) = 8 selected out of 10 total\n    expect(screen.getByText(/8 \\/ 10/)).toBeInTheDocument();\n  });\n\n  it('can be collapsed and expanded', () => {\n    render(\n      <FilterPanel\n        selectedTypes={defaultSelectedTypes}\n        onFilterChange={mockOnFilterChange}\n      />\n    );\n\n    // Initially expanded\n    expect(\n      screen.getByRole('checkbox', { name: /Ressourcerie/ })\n    ).toBeVisible();\n\n    // Click collapse button\n    const toggleButton = screen.getByLabelText('Réduire');\n    fireEvent.click(toggleButton);\n\n    // Checkboxes are hidden\n    expect(\n      screen.queryByRole('checkbox', { name: /Ressourcerie/ })\n    ).not.toBeInTheDocument();\n\n    // Click again to expand\n    const expandButton = screen.getByLabelText('Développer');\n    fireEvent.click(expandButton);\n\n    // Checkboxes are visible again\n    expect(\n      screen.getByRole('checkbox', { name: /Ressourcerie/ })\n    ).toBeVisible();\n  });\n\n  it('applies different visual styles to selected types', () => {\n    const { container } = render(\n      <FilterPanel\n        selectedTypes={['Ressourcerie']}\n        onFilterChange={mockOnFilterChange}\n      />\n    );\n\n    // Find Ressourcerie label and verify it has selection class\n    const labels = container.querySelectorAll('label');\n    const ressourcerieLabel = Array.from(labels).find((label) =>\n      label.textContent?.includes('Ressourcerie')\n    );\n\n    expect(ressourcerieLabel).toHaveClass('bg-primary-50');\n  });\n\n  it('displays colored visual indicator for each type', () => {\n    render(\n      <FilterPanel\n        selectedTypes={defaultSelectedTypes}\n        onFilterChange={mockOnFilterChange}\n      />\n    );\n\n    // Verify each type has its color indicator\n    const colorIndicators = screen\n      .getAllByRole('checkbox')\n      .map((checkbox) =>\n        checkbox.parentElement?.querySelector('.rounded-full')\n      );\n\n    expect(colorIndicators.length).toBeGreaterThan(0);\n    colorIndicators.forEach((indicator) => {\n      expect(indicator).toBeInTheDocument();\n    });\n  });\n\n  it('is accessible with appropriate ARIA attributes', () => {\n    render(\n      <FilterPanel\n        selectedTypes={defaultSelectedTypes}\n        onFilterChange={mockOnFilterChange}\n      />\n    );\n\n    // Checkboxes should be accessible\n    const checkboxes = screen.getAllByRole('checkbox');\n    checkboxes.forEach((checkbox) => {\n      expect(checkbox).toBeEnabled();\n    });\n\n    // Buttons should have appropriate labels\n    expect(screen.getByLabelText(/Réduire|Développer/)).toBeInTheDocument();\n  });\n});\n"],"names":["describe","mockOnFilterChange","jest","fn","defaultSelectedTypes","beforeEach","clearAllMocks","it","render","FilterPanel","selectedTypes","onFilterChange","expect","screen","getByText","toBeInTheDocument","ressourcerieCheckbox","getByRole","name","amapCheckbox","repairCafeCheckbox","toBeChecked","not","fireEvent","click","toHaveBeenCalledWith","selectAllButton","arrayContaining","deselectAllButton","initiativeCounts","Ressourcerie","AMAP","toBeVisible","toggleButton","getByLabelText","queryByRole","expandButton","container","labels","querySelectorAll","ressourcerieLabel","Array","from","find","label","textContent","includes","toHaveClass","colorIndicators","getAllByRole","map","checkbox","parentElement","querySelector","length","toBeGreaterThan","forEach","indicator","checkboxes","toBeEnabled"],"mappings":"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"}