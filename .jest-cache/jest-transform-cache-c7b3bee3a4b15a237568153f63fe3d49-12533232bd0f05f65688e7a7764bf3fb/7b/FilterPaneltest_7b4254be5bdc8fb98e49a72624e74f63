95190a8f49cfbcf241e1619533c9b063
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _FilterPanel = /*#__PURE__*/ _interop_require_default(require("../../components/FilterPanel"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('FilterPanel', ()=>{
    const mockOnFilterChange = jest.fn();
    const defaultSelectedTypes = [
        'Ressourcerie',
        'AMAP'
    ];
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('displays all initiative types', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: defaultSelectedTypes,
            onFilterChange: mockOnFilterChange
        }));
        expect(_react.screen.getByText('Ressourcerie')).toBeInTheDocument();
        expect(_react.screen.getByText('Repair Café')).toBeInTheDocument();
        expect(_react.screen.getByText('AMAP')).toBeInTheDocument();
        expect(_react.screen.getByText('Épicerie sociale')).toBeInTheDocument();
        expect(_react.screen.getByText('Fab Lab')).toBeInTheDocument();
    });
    it('displays selected types as checked', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: defaultSelectedTypes,
            onFilterChange: mockOnFilterChange
        }));
        const ressourcerieCheckbox = _react.screen.getByRole('checkbox', {
            name: /Ressourcerie/
        });
        const amapCheckbox = _react.screen.getByRole('checkbox', {
            name: /AMAP/
        });
        const repairCafeCheckbox = _react.screen.getByRole('checkbox', {
            name: /Repair Café/
        });
        expect(ressourcerieCheckbox).toBeChecked();
        expect(amapCheckbox).toBeChecked();
        expect(repairCafeCheckbox).not.toBeChecked();
    });
    it('calls onFilterChange when selecting a type', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: defaultSelectedTypes,
            onFilterChange: mockOnFilterChange
        }));
        const repairCafeCheckbox = _react.screen.getByRole('checkbox', {
            name: /Repair Café/
        });
        _react.fireEvent.click(repairCafeCheckbox);
        expect(mockOnFilterChange).toHaveBeenCalledWith([
            ...defaultSelectedTypes,
            'Repair Café'
        ]);
    });
    it('calls onFilterChange when deselecting a type', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: defaultSelectedTypes,
            onFilterChange: mockOnFilterChange
        }));
        const ressourcerieCheckbox = _react.screen.getByRole('checkbox', {
            name: /Ressourcerie/
        });
        _react.fireEvent.click(ressourcerieCheckbox);
        expect(mockOnFilterChange).toHaveBeenCalledWith([
            'AMAP'
        ]);
    });
    it('selects all types when clicking "Select all"', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: [],
            onFilterChange: mockOnFilterChange
        }));
        const selectAllButton = _react.screen.getByText('Tout sélectionner');
        _react.fireEvent.click(selectAllButton);
        expect(mockOnFilterChange).toHaveBeenCalledWith(expect.arrayContaining([
            'Ressourcerie',
            'Repair Café',
            'AMAP',
            "Entreprise d'insertion",
            'Point de collecte',
            'Recyclerie',
            'Épicerie sociale',
            'Jardin partagé',
            'Fab Lab',
            'Coopérative',
            'Monnaie locale',
            'Tiers-lieu',
            'Autre'
        ]));
    });
    it('deselects all types when clicking "Deselect all"', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: defaultSelectedTypes,
            onFilterChange: mockOnFilterChange
        }));
        const deselectAllButton = _react.screen.getByText('Tout désélectionner');
        _react.fireEvent.click(deselectAllButton);
        expect(mockOnFilterChange).toHaveBeenCalledWith([]);
    });
    it('displays initiative counters when provided', ()=>{
        const initiativeCounts = {
            Ressourcerie: 5,
            AMAP: 3,
            'Repair Café': 2
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: defaultSelectedTypes,
            onFilterChange: mockOnFilterChange,
            initiativeCounts: initiativeCounts
        }));
        expect(_react.screen.getByText('5')).toBeInTheDocument();
        expect(_react.screen.getByText('3')).toBeInTheDocument();
        expect(_react.screen.getByText('2')).toBeInTheDocument();
    });
    it('displays total filtered initiatives', ()=>{
        const initiativeCounts = {
            Ressourcerie: 5,
            AMAP: 3,
            'Repair Café': 2
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: [
                'Ressourcerie',
                'AMAP'
            ],
            onFilterChange: mockOnFilterChange,
            initiativeCounts: initiativeCounts
        }));
        // 5 (Ressourcerie) + 3 (AMAP) = 8 selected out of 10 total
        expect(_react.screen.getByText(/8 \/ 10/)).toBeInTheDocument();
    });
    it('can be collapsed and expanded', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: defaultSelectedTypes,
            onFilterChange: mockOnFilterChange
        }));
        // Initially expanded
        expect(_react.screen.getByRole('checkbox', {
            name: /Ressourcerie/
        })).toBeVisible();
        // Click collapse button
        const toggleButton = _react.screen.getByLabelText('Réduire');
        _react.fireEvent.click(toggleButton);
        // Checkboxes are hidden
        expect(_react.screen.queryByRole('checkbox', {
            name: /Ressourcerie/
        })).not.toBeInTheDocument();
        // Click again to expand
        const expandButton = _react.screen.getByLabelText('Développer');
        _react.fireEvent.click(expandButton);
        // Checkboxes are visible again
        expect(_react.screen.getByRole('checkbox', {
            name: /Ressourcerie/
        })).toBeVisible();
    });
    it('applies different visual styles to selected types', ()=>{
        const { container } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: [
                'Ressourcerie'
            ],
            onFilterChange: mockOnFilterChange
        }));
        // Find Ressourcerie label and verify it has selection class
        const labels = container.querySelectorAll('label');
        const ressourcerieLabel = Array.from(labels).find((label)=>label.textContent?.includes('Ressourcerie'));
        expect(ressourcerieLabel).toHaveClass('bg-primary-50');
    });
    it('displays colored visual indicator for each type', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: defaultSelectedTypes,
            onFilterChange: mockOnFilterChange
        }));
        // Verify each type has its color indicator
        const colorIndicators = _react.screen.getAllByRole('checkbox').map((checkbox)=>checkbox.parentElement?.querySelector('.rounded-full'));
        expect(colorIndicators.length).toBeGreaterThan(0);
        colorIndicators.forEach((indicator)=>{
            expect(indicator).toBeInTheDocument();
        });
    });
    it('is accessible with appropriate ARIA attributes', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilterPanel.default, {
            selectedTypes: defaultSelectedTypes,
            onFilterChange: mockOnFilterChange
        }));
        // Checkboxes should be accessible
        const checkboxes = _react.screen.getAllByRole('checkbox');
        checkboxes.forEach((checkbox)=>{
            expect(checkbox).toBeEnabled();
        });
        // Buttons should have appropriate labels
        expect(_react.screen.getByLabelText(/Réduire|Développer/)).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,