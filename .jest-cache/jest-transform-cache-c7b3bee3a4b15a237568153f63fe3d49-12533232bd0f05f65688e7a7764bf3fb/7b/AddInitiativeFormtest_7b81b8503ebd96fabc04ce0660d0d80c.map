{"version":3,"sources":["/Users/Raphael/Documents/DEV.nosync/lamap/src/__tests__/components/AddInitiativeForm.test.tsx"],"sourcesContent":["/**\n * Tests for AddInitiativeForm component\n *\n * Tests the form validation, submission, and error handling.\n */\n\nimport { fireEvent, render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { createInitiative } from '@/app/actions';\nimport AddInitiativeForm from '@/components/AddInitiativeForm';\n\n// Mock the server action\njest.mock('@/app/actions', () => ({\n  createInitiative: jest.fn(),\n}));\n\nconst mockCreateInitiative = createInitiative as jest.MockedFunction<\n  typeof createInitiative\n>;\n\ndescribe('AddInitiativeForm', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render all form fields', () => {\n    render(<AddInitiativeForm />);\n\n    expect(screen.getByLabelText(/Initiative Name/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Initiative Type/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Description/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Adresse/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Latitude/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Longitude/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Site web/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Téléphone/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Email/i)).toBeInTheDocument();\n  });\n\n  it('should display submit button', () => {\n    render(<AddInitiativeForm />);\n\n    const submitButton = screen.getByRole('button', {\n      name: /Ajouter l'initiative/i,\n    });\n    expect(submitButton).toBeInTheDocument();\n    expect(submitButton).not.toBeDisabled();\n  });\n\n  it('should display cancel button when onCancel is provided', () => {\n    const mockCancel = jest.fn();\n    render(<AddInitiativeForm onCancel={mockCancel} />);\n\n    const cancelButton = screen.getByRole('button', { name: /Annuler/i });\n    expect(cancelButton).toBeInTheDocument();\n  });\n\n  it('should not display cancel button when onCancel is not provided', () => {\n    render(<AddInitiativeForm />);\n\n    const cancelButton = screen.queryByRole('button', { name: /Annuler/i });\n    expect(cancelButton).not.toBeInTheDocument();\n  });\n\n  it('should call onCancel when cancel button is clicked', async () => {\n    const user = userEvent.setup();\n    const mockCancel = jest.fn();\n    render(<AddInitiativeForm onCancel={mockCancel} />);\n\n    const cancelButton = screen.getByRole('button', { name: /Annuler/i });\n    await user.click(cancelButton);\n\n    expect(mockCancel).toHaveBeenCalledTimes(1);\n  });\n\n  it('should show validation error for missing required fields', async () => {\n    render(<AddInitiativeForm />);\n\n    const submitButton = screen.getByRole('button', {\n      name: /Ajouter l'initiative/i,\n    });\n    fireEvent.click(submitButton);\n\n    await waitFor(() => {\n      expect(\n        screen.getByText(/Veuillez remplir tous les champs obligatoires/i)\n      ).toBeInTheDocument();\n    });\n  });\n\n  it('should submit form with valid data', async () => {\n    const user = userEvent.setup();\n    const mockSuccess = jest.fn();\n\n    mockCreateInitiative.mockResolvedValue({\n      success: true,\n      data: { id: 'initiative123' },\n    });\n\n    render(<AddInitiativeForm onSuccess={mockSuccess} />);\n\n    // Fill in required fields\n    await user.type(screen.getByLabelText(/Initiative Name/i), 'Test AMAP');\n\n    const typeSelect = screen.getByLabelText(/Initiative Type/i);\n    await user.selectOptions(typeSelect, 'AMAP');\n\n    await user.type(screen.getByLabelText(/Latitude/i), '48.8566');\n    await user.type(screen.getByLabelText(/Longitude/i), '2.3522');\n\n    // Submit form\n    const submitButton = screen.getByRole('button', {\n      name: /Ajouter l'initiative/i,\n    });\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(mockCreateInitiative).toHaveBeenCalledWith({\n        name: 'Test AMAP',\n        type: 'AMAP',\n        latitude: 48.8566,\n        longitude: 2.3522,\n      });\n      expect(mockSuccess).toHaveBeenCalled();\n    });\n  });\n\n  it('should submit form with all fields filled', async () => {\n    const user = userEvent.setup();\n\n    mockCreateInitiative.mockResolvedValue({\n      success: true,\n      data: { id: 'initiative123' },\n    });\n\n    render(<AddInitiativeForm />);\n\n    // Fill in all fields\n    await user.type(screen.getByLabelText(/Initiative Name/i), 'Test AMAP');\n\n    const typeSelect = screen.getByLabelText(/Initiative Type/i);\n    await user.selectOptions(typeSelect, 'AMAP');\n\n    await user.type(\n      screen.getByLabelText(/Description/i),\n      'A great initiative'\n    );\n    await user.type(\n      screen.getByLabelText(/Adresse/i),\n      '123 Test Street, Paris'\n    );\n    await user.type(screen.getByLabelText(/Latitude/i), '48.8566');\n    await user.type(screen.getByLabelText(/Longitude/i), '2.3522');\n    await user.type(screen.getByLabelText(/Site web/i), 'https://test.com');\n    await user.type(screen.getByLabelText(/Téléphone/i), '0123456789');\n    await user.type(screen.getByLabelText(/Email/i), 'test@test.com');\n\n    const submitButton = screen.getByRole('button', {\n      name: /Ajouter l'initiative/i,\n    });\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(mockCreateInitiative).toHaveBeenCalledWith({\n        name: 'Test AMAP',\n        type: 'AMAP',\n        description: 'A great initiative',\n        address: '123 Test Street, Paris',\n        latitude: 48.8566,\n        longitude: 2.3522,\n        website: 'https://test.com',\n        phone: '0123456789',\n        email: 'test@test.com',\n      });\n    });\n  });\n\n  it('should display error message on submission failure', async () => {\n    const user = userEvent.setup();\n\n    mockCreateInitiative.mockResolvedValue({\n      success: false,\n      error: 'Vous devez être connecté',\n    });\n\n    render(<AddInitiativeForm />);\n\n    // Fill in required fields\n    await user.type(screen.getByLabelText(/Initiative Name/i), 'Test AMAP');\n    const typeSelect = screen.getByLabelText(/Initiative Type/i);\n    await user.selectOptions(typeSelect, 'AMAP');\n    await user.type(screen.getByLabelText(/Latitude/i), '48.8566');\n    await user.type(screen.getByLabelText(/Longitude/i), '2.3522');\n\n    const submitButton = screen.getByRole('button', {\n      name: /Ajouter l'initiative/i,\n    });\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/Vous devez être connecté/i)).toBeInTheDocument();\n    });\n  });\n\n  it('should disable submit button while submitting', async () => {\n    const user = userEvent.setup();\n\n    // Make the mock take some time to resolve\n    mockCreateInitiative.mockImplementation(\n      () =>\n        new Promise((resolve) =>\n          setTimeout(\n            () => resolve({ success: true, data: { id: 'test' } }),\n            100\n          )\n        )\n    );\n\n    render(<AddInitiativeForm />);\n\n    // Fill in required fields\n    await user.type(screen.getByLabelText(/Initiative Name/i), 'Test');\n    const typeSelect = screen.getByLabelText(/Initiative Type/i);\n    await user.selectOptions(typeSelect, 'AMAP');\n    await user.type(screen.getByLabelText(/Latitude/i), '48.8566');\n    await user.type(screen.getByLabelText(/Longitude/i), '2.3522');\n\n    const submitButton = screen.getByRole('button', {\n      name: /Ajouter l'initiative/i,\n    });\n\n    await user.click(submitButton);\n\n    // Button should be disabled during submission\n    expect(submitButton).toBeDisabled();\n    expect(screen.getByText(/Ajout en cours/i)).toBeInTheDocument();\n\n    await waitFor(() => {\n      expect(submitButton).not.toBeDisabled();\n    });\n  });\n\n  it('should reset form after successful submission', async () => {\n    const user = userEvent.setup();\n\n    mockCreateInitiative.mockResolvedValue({\n      success: true,\n      data: { id: 'initiative123' },\n    });\n\n    render(<AddInitiativeForm />);\n\n    const nameInput = screen.getByLabelText(\n      /Initiative Name/i\n    ) as HTMLInputElement;\n    await user.type(nameInput, 'Test AMAP');\n\n    const typeSelect = screen.getByLabelText(/Initiative Type/i);\n    await user.selectOptions(typeSelect, 'AMAP');\n\n    await user.type(screen.getByLabelText(/Latitude/i), '48.8566');\n    await user.type(screen.getByLabelText(/Longitude/i), '2.3522');\n\n    const submitButton = screen.getByRole('button', {\n      name: /Ajouter l'initiative/i,\n    });\n    await user.click(submitButton);\n\n    await waitFor(() => {\n      expect(nameInput.value).toBe('');\n    });\n  });\n\n  it('should render all initiative types in the select', () => {\n    render(<AddInitiativeForm />);\n\n    const typeSelect = screen.getByLabelText(/Initiative Type/i);\n    const options = Array.from(typeSelect.querySelectorAll('option')).map(\n      (option) => option.textContent\n    );\n\n    expect(options).toContain('Ressourcerie');\n    expect(options).toContain('Repair Café');\n    expect(options).toContain('AMAP');\n    expect(options).toContain(\"Entreprise d'insertion\");\n    expect(options).toContain('Point de collecte');\n    expect(options).toContain('Recyclerie');\n    expect(options).toContain('Épicerie sociale');\n    expect(options).toContain('Jardin partagé');\n    expect(options).toContain('Fab Lab');\n    expect(options).toContain('Coopérative');\n    expect(options).toContain('Monnaie locale');\n    expect(options).toContain('Tiers-lieu');\n    expect(options).toContain('Autre');\n  });\n\n  it('should handle invalid number inputs gracefully', async () => {\n    render(<AddInitiativeForm />);\n\n    const submitButton = screen.getByRole('button', {\n      name: /Ajouter l'initiative/i,\n    });\n\n    // Don't fill lat/lng (invalid numbers)\n    fireEvent.click(submitButton);\n\n    await waitFor(() => {\n      expect(\n        screen.getByText(/Veuillez remplir tous les champs obligatoires/i)\n      ).toBeInTheDocument();\n    });\n\n    expect(mockCreateInitiative).not.toHaveBeenCalled();\n  });\n});\n"],"names":["jest","mock","createInitiative","fn","mockCreateInitiative","describe","beforeEach","clearAllMocks","it","render","AddInitiativeForm","expect","screen","getByLabelText","toBeInTheDocument","submitButton","getByRole","name","not","toBeDisabled","mockCancel","onCancel","cancelButton","queryByRole","user","userEvent","setup","click","toHaveBeenCalledTimes","fireEvent","waitFor","getByText","mockSuccess","mockResolvedValue","success","data","id","onSuccess","type","typeSelect","selectOptions","toHaveBeenCalledWith","latitude","longitude","toHaveBeenCalled","description","address","website","phone","email","error","mockImplementation","Promise","resolve","setTimeout","nameInput","value","toBe","options","Array","from","querySelectorAll","map","option","textContent","toContain"],"mappings":"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"}