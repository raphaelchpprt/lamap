3430dd9942445344b7240b914d78d1b3
/**
 * Types générés pour la base de données Supabase LaMap
 *
 * Ces types sont générés automatiquement à partir du schéma de base de données.
 * Ils garantissent la cohérence entre le frontend TypeScript et la base PostgreSQL.
 *
 * Pour régénérer ces types après modification du schéma :
 * npx supabase gen types typescript --project-id YOUR_PROJECT_ID --schema public > src/lib/supabase/types.ts
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get databaseInitiativeToInitiative () {
        return databaseInitiativeToInitiative;
    },
    get initiativeToDatabaseInitiative () {
        return initiativeToDatabaseInitiative;
    }
});
function databaseInitiativeToInitiative(dbInitiative) {
    // Parse PostGIS point 'POINT(lng lat)' to GeoJSON
    const locationMatch = dbInitiative.location.match(/POINT\(([^)]+)\)/);
    if (!locationMatch) {
        throw new Error(`Invalid location format: ${dbInitiative.location}`);
    }
    const [lng, lat] = locationMatch[1].split(' ').map(Number);
    return {
        id: dbInitiative.id,
        name: dbInitiative.name,
        type: dbInitiative.type,
        description: dbInitiative.description || undefined,
        address: dbInitiative.address || undefined,
        location: {
            type: 'Point',
            coordinates: [
                lng,
                lat
            ]
        },
        verified: dbInitiative.verified,
        image_url: dbInitiative.image_url || undefined,
        website: dbInitiative.website || undefined,
        phone: dbInitiative.phone || undefined,
        email: dbInitiative.email || undefined,
        opening_hours: dbInitiative.opening_hours || undefined,
        user_id: dbInitiative.user_id || undefined,
        created_at: dbInitiative.created_at,
        updated_at: dbInitiative.updated_at
    };
}
function initiativeToDatabaseInitiative(initiative) {
    const location = initiative.location ? `POINT(${initiative.location.coordinates[0]} ${initiative.location.coordinates[1]})` : undefined;
    return {
        id: initiative.id,
        name: initiative.name ?? '',
        type: initiative.type ?? 'Autre',
        description: initiative.description || null,
        address: initiative.address || null,
        location: location ?? 'POINT(0 0)',
        verified: initiative.verified ?? false,
        image_url: initiative.image_url || null,
        website: initiative.website || null,
        phone: initiative.phone || null,
        email: initiative.email || null,
        opening_hours: initiative.opening_hours || null,
        user_id: initiative.user_id || null
    };
}

//# sourceMappingURL=data:application/json;base64,