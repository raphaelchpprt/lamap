60c5a15917dcdd9a499041e403d0fa65
/**
 * Tests for Map component
 *
 * Tests the Mapbox integration, marker display, and clustering.
 */ "use strict";
// Mock mapbox-gl
jest.mock('mapbox-gl', ()=>({
        Map: jest.fn(()=>({
                on: jest.fn(),
                remove: jest.fn(),
                addControl: jest.fn(),
                getSource: jest.fn(),
                addSource: jest.fn(),
                addLayer: jest.fn(),
                loadImage: jest.fn(),
                addImage: jest.fn()
            })),
        NavigationControl: jest.fn(),
        Marker: jest.fn(()=>({
                setLngLat: jest.fn().mockReturnThis(),
                addTo: jest.fn().mockReturnThis(),
                remove: jest.fn()
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _Map = /*#__PURE__*/ _interop_require_default(require("../../components/Map/Map"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Map Component', ()=>{
    beforeEach(()=>{
        // Set environment variable for Mapbox token
        process.env.NEXT_PUBLIC_MAPBOX_TOKEN = 'test-token';
    });
    it('should render map container', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {}));
        const mapContainer = _react.screen.getByTestId('map-container');
        expect(mapContainer).toBeInTheDocument();
    });
    it('should apply custom className', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {
            className: "custom-map-class"
        }));
        const mapContainer = _react.screen.getByTestId('map-container');
        expect(mapContainer).toHaveClass('custom-map-class');
    });
    it('should handle missing Mapbox token gracefully', ()=>{
        delete process.env.NEXT_PUBLIC_MAPBOX_TOKEN;
        // Should not throw
        expect(()=>(0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {}))).not.toThrow();
    });
    it('should render with default configuration', ()=>{
        const { container } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {}));
        expect(container.querySelector('[data-testid="map-container"]')).toBeInTheDocument();
    });
    it('should call onInitiativeClick when provided', ()=>{
        const mockOnInitiativeClick = jest.fn();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {
            onInitiativeClick: mockOnInitiativeClick
        }));
        // Map is rendered, callback is set up
        expect(mockOnInitiativeClick).not.toHaveBeenCalled();
    });
    it('should call onMapClick when provided', ()=>{
        const mockOnMapClick = jest.fn();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {
            onMapClick: mockOnMapClick
        }));
        // Map is rendered, callback is set up
        expect(mockOnMapClick).not.toHaveBeenCalled();
    });
    it('should enable clustering by default', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {}));
        const mapContainer = _react.screen.getByTestId('map-container');
        expect(mapContainer).toBeInTheDocument();
    });
    it('should disable clustering when specified', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {
            enableClustering: false
        }));
        const mapContainer = _react.screen.getByTestId('map-container');
        expect(mapContainer).toBeInTheDocument();
    });
    it('should apply filters when provided', ()=>{
        const filters = {
            types: [
                'AMAP',
                'Repair CafÃ©'
            ]
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {
            filters: filters
        }));
        const mapContainer = _react.screen.getByTestId('map-container');
        expect(mapContainer).toBeInTheDocument();
    });
    it('should have correct height', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {}));
        const mapContainer = _react.screen.getByTestId('map-container');
        expect(mapContainer).toHaveClass('h-full');
    });
    it('should have correct width', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {}));
        const mapContainer = _react.screen.getByTestId('map-container');
        expect(mapContainer).toHaveClass('w-full');
    });
    it('should render without errors', ()=>{
        // Should not throw any errors
        expect(()=>(0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Map.default, {}))).not.toThrow();
    });
});

//# sourceMappingURL=data:application/json;base64,