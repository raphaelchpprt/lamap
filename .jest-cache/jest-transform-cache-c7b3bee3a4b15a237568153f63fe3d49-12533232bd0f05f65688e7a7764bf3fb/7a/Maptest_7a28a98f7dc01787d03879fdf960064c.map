{"version":3,"sources":["/Users/Raphael/Documents/DEV.nosync/lamap/src/__tests__/components/Map.test.tsx"],"sourcesContent":["/**\n * Tests for Map component\n *\n * Tests the Mapbox integration, marker display, and clustering.\n */\n\nimport { render, screen } from '@testing-library/react';\n\nimport Map from '@/components/Map/Map';\n\nimport type { InitiativeType } from '@/types/initiative';\n\n// Mock mapbox-gl (uses __mocks__/mapbox-gl.js)\njest.mock('mapbox-gl');\n\n// Mock Supabase client\njest.mock('@/lib/supabase/client', () => ({\n  createClient: jest.fn(() => ({\n    from: jest.fn().mockReturnThis(),\n    select: jest.fn().mockReturnThis(),\n    eq: jest.fn().mockReturnThis(),\n    single: jest.fn().mockResolvedValue({\n      data: [],\n      error: null,\n    }),\n  })),\n}));\n\ndescribe('Map Component', () => {\n  beforeEach(() => {\n    // Set environment variable for Mapbox token\n    process.env.NEXT_PUBLIC_MAPBOX_TOKEN = 'test-token';\n  });\n\n  it('should render map container', () => {\n    render(<Map />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toBeInTheDocument();\n  });\n\n  it('should apply custom className', () => {\n    render(<Map className=\"custom-map-class\" />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toHaveClass('custom-map-class');\n  });\n\n  it('should handle missing Mapbox token gracefully', () => {\n    delete process.env.NEXT_PUBLIC_MAPBOX_TOKEN;\n\n    // Should not throw\n    expect(() => render(<Map />)).not.toThrow();\n  });\n\n  it('should render with default configuration', () => {\n    const { container } = render(<Map />);\n\n    expect(\n      container.querySelector('[data-testid=\"map-container\"]')\n    ).toBeInTheDocument();\n  });\n\n  it('should call onInitiativeClick when provided', () => {\n    const mockOnInitiativeClick = jest.fn();\n\n    render(<Map onInitiativeClick={mockOnInitiativeClick} />);\n\n    // Map is rendered, callback is set up\n    expect(mockOnInitiativeClick).not.toHaveBeenCalled();\n  });\n\n  it('should call onMapClick when provided', () => {\n    const mockOnMapClick = jest.fn();\n\n    render(<Map onMapClick={mockOnMapClick} />);\n\n    // Map is rendered, callback is set up\n    expect(mockOnMapClick).not.toHaveBeenCalled();\n  });\n\n  it('should enable clustering by default', () => {\n    render(<Map />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toBeInTheDocument();\n  });\n\n  it('should disable clustering when specified', () => {\n    render(<Map enableClustering={false} />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toBeInTheDocument();\n  });\n\n  it('should apply filters when provided', () => {\n    const filters = {\n      types: ['AMAP', 'Repair Caf√©'] as InitiativeType[],\n    };\n\n    render(<Map filters={filters} />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toBeInTheDocument();\n  });\n\n  it('should have correct height', () => {\n    render(<Map />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toHaveClass('h-full');\n  });\n\n  it('should have correct width', () => {\n    render(<Map />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toHaveClass('w-full');\n  });\n\n  it('should render without errors', () => {\n    // Should not throw any errors\n    expect(() => render(<Map />)).not.toThrow();\n  });\n});\n"],"names":["jest","mock","createClient","fn","from","mockReturnThis","select","eq","single","mockResolvedValue","data","error","describe","beforeEach","process","env","NEXT_PUBLIC_MAPBOX_TOKEN","it","render","Map","mapContainer","screen","getByTestId","expect","toBeInTheDocument","className","toHaveClass","not","toThrow","container","querySelector","mockOnInitiativeClick","onInitiativeClick","toHaveBeenCalled","mockOnMapClick","onMapClick","enableClustering","filters","types"],"mappings":"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"}