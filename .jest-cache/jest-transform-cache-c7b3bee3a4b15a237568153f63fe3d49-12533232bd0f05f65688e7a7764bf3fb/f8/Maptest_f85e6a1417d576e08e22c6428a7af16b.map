{"version":3,"sources":["/Users/Raphael/Documents/DEV.nosync/lamap/src/__tests__/components/Map.test.tsx"],"sourcesContent":["/**\n * Tests for Map component\n *\n * Tests the Mapbox integration, marker display, and clustering.\n */\n\nimport { render, screen } from '@testing-library/react';\n\nimport Map from '@/components/Map/Map';\n\nimport type { InitiativeType } from '@/types/initiative';\n\n// Mock mapbox-gl\njest.mock('mapbox-gl', () => ({\n  Map: jest.fn(() => ({\n    on: jest.fn(),\n    remove: jest.fn(),\n    addControl: jest.fn(),\n    getSource: jest.fn(),\n    addSource: jest.fn(),\n    addLayer: jest.fn(),\n    loadImage: jest.fn(),\n    addImage: jest.fn(),\n  })),\n  NavigationControl: jest.fn(),\n  Marker: jest.fn(() => ({\n    setLngLat: jest.fn().mockReturnThis(),\n    addTo: jest.fn().mockReturnThis(),\n    remove: jest.fn(),\n  })),\n}));\n\ndescribe('Map Component', () => {\n  beforeEach(() => {\n    // Set environment variable for Mapbox token\n    process.env.NEXT_PUBLIC_MAPBOX_TOKEN = 'test-token';\n  });\n\n  it('should render map container', () => {\n    render(<Map />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toBeInTheDocument();\n  });\n\n  it('should apply custom className', () => {\n    render(<Map className=\"custom-map-class\" />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toHaveClass('custom-map-class');\n  });\n\n  it('should handle missing Mapbox token gracefully', () => {\n    delete process.env.NEXT_PUBLIC_MAPBOX_TOKEN;\n\n    // Should not throw\n    expect(() => render(<Map />)).not.toThrow();\n  });\n\n  it('should render with default configuration', () => {\n    const { container } = render(<Map />);\n\n    expect(\n      container.querySelector('[data-testid=\"map-container\"]')\n    ).toBeInTheDocument();\n  });\n\n  it('should call onInitiativeClick when provided', () => {\n    const mockOnInitiativeClick = jest.fn();\n\n    render(<Map onInitiativeClick={mockOnInitiativeClick} />);\n\n    // Map is rendered, callback is set up\n    expect(mockOnInitiativeClick).not.toHaveBeenCalled();\n  });\n\n  it('should call onMapClick when provided', () => {\n    const mockOnMapClick = jest.fn();\n\n    render(<Map onMapClick={mockOnMapClick} />);\n\n    // Map is rendered, callback is set up\n    expect(mockOnMapClick).not.toHaveBeenCalled();\n  });\n\n  it('should enable clustering by default', () => {\n    render(<Map />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toBeInTheDocument();\n  });\n\n  it('should disable clustering when specified', () => {\n    render(<Map enableClustering={false} />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toBeInTheDocument();\n  });\n\n  it('should apply filters when provided', () => {\n    const filters = {\n      types: ['AMAP', 'Repair Caf√©'] as InitiativeType[],\n    };\n\n    render(<Map filters={filters} />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toBeInTheDocument();\n  });\n\n  it('should have correct height', () => {\n    render(<Map />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toHaveClass('h-full');\n  });\n\n  it('should have correct width', () => {\n    render(<Map />);\n\n    const mapContainer = screen.getByTestId('map-container');\n    expect(mapContainer).toHaveClass('w-full');\n  });\n\n  it('should render without errors', () => {\n    // Should not throw any errors\n    expect(() => render(<Map />)).not.toThrow();\n  });\n});\n"],"names":["jest","mock","Map","fn","on","remove","addControl","getSource","addSource","addLayer","loadImage","addImage","NavigationControl","Marker","setLngLat","mockReturnThis","addTo","describe","beforeEach","process","env","NEXT_PUBLIC_MAPBOX_TOKEN","it","render","mapContainer","screen","getByTestId","expect","toBeInTheDocument","className","toHaveClass","not","toThrow","container","querySelector","mockOnInitiativeClick","onInitiativeClick","toHaveBeenCalled","mockOnMapClick","onMapClick","enableClustering","filters","types"],"mappings":"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"}