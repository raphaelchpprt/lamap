4d5d857681c299b2432692c1ef04b61b
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, // ================================
// MAIN COMPONENT
// ================================
"default", {
    enumerable: true,
    get: function() {
        return Map;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _mapboxgl = /*#__PURE__*/ _interop_require_default(require("mapbox-gl"));
require("mapbox-gl/dist/mapbox-gl.css");
const _react = require("react");
const _client = require("../../lib/supabase/client");
const _types = require("../../lib/supabase/types");
const _initiative = require("../../types/initiative");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// ================================
// CONFIGURATION
// ================================
const DEFAULT_CONFIG = {
    style: 'mapbox://styles/mapbox/light-v11',
    center: [
        2.3522,
        46.6034
    ],
    zoom: 6,
    minZoom: 3,
    maxZoom: 18
};
function Map({ className = 'h-full w-full', filters, onInitiativeClick, onMapClick, enableClustering = true, autoFit = false, initiatives: externalInitiatives }) {
    // ================================
    // STATE // STATE & REFS REFS
    // ================================
    const mapContainer = (0, _react.useRef)(null);
    const map = (0, _react.useRef)(null);
    const [isLoaded, setIsLoaded] = (0, _react.useState)(false);
    const [initiatives, setInitiatives] = (0, _react.useState)([]);
    const [loading, setLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    // ================================
    // MAP INITIALIZATION
    // ================================
    (0, _react.useEffect)(()=>{
        if (!mapContainer.current || map.current) return;
        // Check for Mapbox token
        const token = process.env.NEXT_PUBLIC_MAPBOX_TOKEN;
        if (!token) {
            setError('Missing Mapbox token. Check your .env.local file');
            return;
        }
        _mapboxgl.default.accessToken = token;
        try {
            map.current = new _mapboxgl.default.Map({
                container: mapContainer.current,
                style: DEFAULT_CONFIG.style,
                center: DEFAULT_CONFIG.center,
                zoom: DEFAULT_CONFIG.zoom,
                minZoom: DEFAULT_CONFIG.minZoom,
                maxZoom: DEFAULT_CONFIG.maxZoom,
                antialias: true
            });
            map.current.on('load', ()=>{
                setIsLoaded(true);
                if (map.current) {
                    setupMapSources();
                    setupMapLayers();
                    setupMapInteractions();
                }
            });
            // Navigation controls
            map.current.addControl(new _mapboxgl.default.NavigationControl(), 'top-right');
            // Geolocation
            map.current.addControl(new _mapboxgl.default.GeolocateControl({
                positionOptions: {
                    enableHighAccuracy: true
                },
                trackUserLocation: true,
                showUserHeading: true
            }), 'top-right');
            // Fullscreen control
            map.current.addControl(new _mapboxgl.default.FullscreenControl(), 'top-right');
        } catch (err) {
            console.error('Error initializing map:', err);
            setError('Unable to initialize Mapbox map');
        }
        return ()=>{
            if (map.current) {
                map.current.remove();
                map.current = null;
                setIsLoaded(false);
            }
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    // ================================
    // LOADING INITIATIVES
    // ================================
    const loadInitiatives = (0, _react.useCallback)(async ()=>{
        if (externalInitiatives) {
            setInitiatives(externalInitiatives);
            return;
        }
        setLoading(true);
        setError(null);
        try {
            const supabase = (0, _client.createClient)();
            let query = supabase.from('initiatives').select('*');
            // Apply filters
            if (filters?.types?.length) {
                query = query.in('type', filters.types);
            }
            if (filters?.verified_only) {
                query = query.eq('verified', true);
            }
            if (filters?.search_query) {
                query = query.or(`name.ilike.%${filters.search_query}%,description.ilike.%${filters.search_query}%`);
            }
            const { data, error: dbError } = await query;
            if (dbError) {
                throw new Error(`Erreur Supabase: ${dbError.message}`);
            }
            const formattedInitiatives = (data || []).map(_types.databaseInitiativeToInitiative);
            setInitiatives(formattedInitiatives);
        } catch (err) {
            console.error('Erreur lors du chargement des initiatives:', err);
            setError(err instanceof Error ? err.message : 'Erreur inconnue');
        } finally{
            setLoading(false);
        }
    }, [
        filters,
        externalInitiatives
    ]);
    (0, _react.useEffect)(()=>{
        loadInitiatives();
    }, [
        loadInitiatives
    ]);
    // ================================
    // MAPBOX SOURCES CONFIGURATION
    // ================================
    const setupMapSources = (0, _react.useCallback)(()=>{
        if (!map.current) return;
        // Source for initiatives (points)
        if (!map.current.getSource('initiatives')) {
            map.current.addSource('initiatives', {
                type: 'geojson',
                data: {
                    type: 'FeatureCollection',
                    features: []
                },
                cluster: enableClustering,
                clusterMaxZoom: 14,
                clusterRadius: 50
            });
        }
    }, [
        enableClustering
    ]);
    // ================================
    // LAYERS CONFIGURATION
    // ================================
    const setupMapLayers = (0, _react.useCallback)(()=>{
        if (!map.current) return;
        // Clusters
        if (enableClustering) {
            // Circles for clusters
            if (!map.current.getLayer('clusters')) {
                map.current.addLayer({
                    id: 'clusters',
                    type: 'circle',
                    source: 'initiatives',
                    filter: [
                        'has',
                        'point_count'
                    ],
                    paint: {
                        'circle-color': [
                            'step',
                            [
                                'get',
                                'point_count'
                            ],
                            '#51bbd6',
                            10,
                            '#f1c40f',
                            50,
                            '#e74c3c'
                        ],
                        'circle-radius': [
                            'step',
                            [
                                'get',
                                'point_count'
                            ],
                            20,
                            10,
                            30,
                            50,
                            40
                        ],
                        'circle-stroke-width': 2,
                        'circle-stroke-color': '#fff'
                    }
                });
            }
            // Numbers on clusters
            if (!map.current.getLayer('cluster-count')) {
                map.current.addLayer({
                    id: 'cluster-count',
                    type: 'symbol',
                    source: 'initiatives',
                    filter: [
                        'has',
                        'point_count'
                    ],
                    layout: {
                        'text-field': '{point_count_abbreviated}',
                        'text-font': [
                            'DIN Offc Pro Medium',
                            'Arial Unicode MS Bold'
                        ],
                        'text-size': 12
                    },
                    paint: {
                        'text-color': '#ffffff'
                    }
                });
            }
        }
        // Individual points (not clustered)
        if (!map.current.getLayer('unclustered-point')) {
            map.current.addLayer({
                id: 'unclustered-point',
                type: 'circle',
                source: 'initiatives',
                filter: enableClustering ? [
                    '!',
                    [
                        'has',
                        'point_count'
                    ]
                ] : undefined,
                paint: {
                    'circle-radius': [
                        'interpolate',
                        [
                            'linear'
                        ],
                        [
                            'zoom'
                        ],
                        8,
                        4,
                        12,
                        8,
                        16,
                        12
                    ],
                    'circle-color': [
                        'match',
                        [
                            'get',
                            'type'
                        ],
                        'Ressourcerie',
                        _initiative.INITIATIVE_COLORS['Ressourcerie'],
                        'Repair Café',
                        _initiative.INITIATIVE_COLORS['Repair Café'],
                        'AMAP',
                        _initiative.INITIATIVE_COLORS['AMAP'],
                        "Entreprise d'insertion",
                        _initiative.INITIATIVE_COLORS["Entreprise d'insertion"],
                        'Point de collecte',
                        _initiative.INITIATIVE_COLORS['Point de collecte'],
                        'Recyclerie',
                        _initiative.INITIATIVE_COLORS['Recyclerie'],
                        'Épicerie sociale',
                        _initiative.INITIATIVE_COLORS['Épicerie sociale'],
                        'Jardin partagé',
                        _initiative.INITIATIVE_COLORS['Jardin partagé'],
                        'Fab Lab',
                        _initiative.INITIATIVE_COLORS['Fab Lab'],
                        'Coopérative',
                        _initiative.INITIATIVE_COLORS['Coopérative'],
                        'Monnaie locale',
                        _initiative.INITIATIVE_COLORS['Monnaie locale'],
                        'Tiers-lieu',
                        _initiative.INITIATIVE_COLORS['Tiers-lieu'],
                        _initiative.INITIATIVE_COLORS['Autre']
                    ],
                    'circle-stroke-width': 2,
                    'circle-stroke-color': '#ffffff',
                    'circle-opacity': 0.8
                }
            });
        }
    }, [
        enableClustering
    ]);
    // ================================
    // MAP INTERACTIONS
    // ================================
    const setupMapInteractions = (0, _react.useCallback)(()=>{
        if (!map.current) return;
        // Pointer cursor on interactive elements
        map.current.on('mouseenter', 'clusters', ()=>{
            if (map.current) map.current.getCanvas().style.cursor = 'pointer';
        });
        map.current.on('mouseleave', 'clusters', ()=>{
            if (map.current) map.current.getCanvas().style.cursor = '';
        });
        map.current.on('mouseenter', 'unclustered-point', ()=>{
            if (map.current) map.current.getCanvas().style.cursor = 'pointer';
        });
        map.current.on('mouseleave', 'unclustered-point', ()=>{
            if (map.current) map.current.getCanvas().style.cursor = '';
        });
        // Click on cluster: zoom
        map.current.on('click', 'clusters', (e)=>{
            if (!map.current) return;
            const features = map.current.queryRenderedFeatures(e.point, {
                layers: [
                    'clusters'
                ]
            });
            const clusterId = features[0]?.properties?.cluster_id;
            if (clusterId) {
                const source = map.current.getSource('initiatives');
                source.getClusterExpansionZoom(clusterId, (err, zoom)=>{
                    if (err || !map.current || zoom === null || zoom === undefined) return;
                    map.current.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom
                    });
                });
            }
        });
        // Click on point: show details
        map.current.on('click', 'unclustered-point', (e)=>{
            const features = e.features?.[0];
            if (features?.properties && onInitiativeClick) {
                const initiative = JSON.parse(features.properties.initiative);
                onInitiativeClick(initiative);
            }
        });
        // Click on map
        map.current.on('click', (e)=>{
            const features = map.current?.queryRenderedFeatures(e.point, {
                layers: [
                    'clusters',
                    'unclustered-point'
                ]
            });
            // If we didn't click on a marker/cluster
            if (!features?.length && onMapClick) {
                onMapClick([
                    e.lngLat.lng,
                    e.lngLat.lat
                ]);
            }
        });
    }, [
        onInitiativeClick,
        onMapClick
    ]);
    // ================================
    // DATA UPDATE
    // ================================
    (0, _react.useEffect)(()=>{
        if (!map.current || !isLoaded) return;
        const source = map.current.getSource('initiatives');
        if (!source) return;
        // Convert to GeoJSON
        const geojsonData = {
            type: 'FeatureCollection',
            features: initiatives.map((initiative)=>({
                    type: 'Feature',
                    geometry: initiative.location,
                    properties: {
                        id: initiative.id,
                        name: initiative.name,
                        type: initiative.type,
                        verified: initiative.verified,
                        initiative: JSON.stringify(initiative)
                    }
                }))
        };
        source.setData(geojsonData);
        // Auto-fit si demandé
        if (autoFit && initiatives.length > 0) {
            const coordinates = initiatives.map((i)=>i.location.coordinates);
            const bounds = coordinates.reduce((bounds, coord)=>bounds.extend(coord), new _mapboxgl.default.LngLatBounds(coordinates[0], coordinates[0]));
            map.current.fitBounds(bounds, {
                padding: 50,
                maxZoom: 12
            });
        }
    }, [
        initiatives,
        isLoaded,
        autoFit
    ]);
    // ================================
    // PUBLIC METHODS (exposed via ref if needed)
    // ================================
    const _flyTo = (0, _react.useCallback)((coordinates, zoom = 14)=>{
        if (map.current) {
            map.current.flyTo({
                center: coordinates,
                zoom
            });
        }
    }, []);
    const _fitBounds = (0, _react.useCallback)((bounds)=>{
        if (map.current) {
            map.current.fitBounds(bounds, {
                padding: 50
            });
        }
    }, []);
    // ================================
    // RENDU
    // ================================
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `relative ${className}`,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                ref: mapContainer,
                className: "h-full w-full",
                "data-testid": "mapbox-container"
            }),
            loading && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "absolute inset-0 bg-white/80 flex items-center justify-center z-10",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "bg-white rounded-lg shadow-lg p-4 flex items-center space-x-3",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "animate-spin rounded-full h-6 w-6 border-b-2 border-primary-500"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            className: "text-sm font-medium",
                            children: "Chargement des initiatives..."
                        })
                    ]
                })
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "absolute top-4 left-4 right-4 z-20",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "bg-red-50 border border-red-200 rounded-lg p-4",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "flex-shrink-0",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                                    className: "h-5 w-5 text-red-400",
                                    viewBox: "0 0 20 20",
                                    fill: "currentColor",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                        fillRule: "evenodd",
                                        d: "M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z",
                                        clipRule: "evenodd"
                                    })
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "ml-3",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                        className: "text-sm font-medium text-red-800",
                                        children: "Erreur de chargement"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "mt-2 text-sm text-red-700",
                                        children: error
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "mt-3",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                            onClick: ()=>{
                                                setError(null);
                                                loadInitiatives();
                                            },
                                            className: "text-sm bg-red-100 hover:bg-red-200 text-red-800 px-3 py-2 rounded-md transition-colors",
                                            children: "R\xe9essayer"
                                        })
                                    })
                                ]
                            })
                        ]
                    })
                })
            }),
            !loading && !error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "absolute bottom-4 left-4 z-10",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "bg-white/90 backdrop-blur-sm rounded-lg px-3 py-2 shadow-sm",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                        className: "text-xs text-gray-600",
                        children: [
                            initiatives.length,
                            " initiative",
                            initiatives.length > 1 ? 's' : '',
                            ' ',
                            "affich\xe9e",
                            initiatives.length > 1 ? 's' : ''
                        ]
                    })
                })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,